{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\finalproj\\\\react_finalproj\\\\client\\\\src\\\\components\\\\forms\\\\ResumeSequence.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, memo, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faArrowLeft, faCheck, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport '../../assets/css/resumeSequence.css';\nimport { voiceService } from '../../api/voiceService';\nimport { useVoiceRecording } from '../../hooks/useVoiceRecording';\nimport axios from 'axios';\n\n// 미리 녹음된 안내 음성 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst audioGuides = {\n  1: '/static/audio/guides/name_question.mp3',\n  // \"이름이 어떻게 되세요?\"\n  2: '/static/audio/guides/age_question.mp3',\n  // \"나이가 어떻게 되세요?\"\n  3: '/static/audio/guides/phone_question.mp3',\n  // \"전화번호가 어떻게 되세요?\"\n  4: '/static/audio/guides/address_question.mp3' // \"어디 사세요?\"\n};\nconst ResumeSequence = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState(() => {\n    // 로컬 스토리지에서 기존 데이터 불러오기\n    const savedData = localStorage.getItem('resumeFormData');\n    return savedData ? JSON.parse(savedData) : {\n      name: '',\n      age: '',\n      phone: '',\n      address: ''\n    };\n  });\n  const [isListening, setIsListening] = useState(false);\n  const [completedSteps, setCompletedSteps] = useState([]);\n  const inputRef = useRef(null);\n  const sectionsRef = useRef([]);\n  const {\n    isRecording,\n    error,\n    startRecording,\n    checkSilence\n  } = useVoiceRecording();\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 폼 데이터가 변경될 때마다 로컬 스토리지에 저장\n  useEffect(() => {\n    localStorage.setItem('resumeFormData', JSON.stringify(formData));\n  }, [formData]);\n\n  // 모든 단계가 완료되었는지 확인\n  const isAllCompleted = completedSteps.length === 4;\n\n  // 폼 제출 처리\n  const handleSubmit = async () => {\n    try {\n      // 서버로 데이터 전송\n      const response = await axios.post('http://localhost:8000/api/voice/resume', formData);\n      if (response.data.success) {\n        // 성공 시 로컬 스토리지 클리어\n        localStorage.removeItem('resumeFormData');\n        // 다음 페이지로 이동\n        navigate('/success');\n      }\n    } catch (error) {\n      console.error('폼 제출 중 오류:', error);\n    }\n  };\n\n  // TTS 함수 수정\n  const speak = async step => {\n    try {\n      const audioUrl = `http://localhost:8000${audioGuides[step]}`;\n      const audio = new Audio(audioUrl);\n      return new Promise(resolve => {\n        audio.onended = () => resolve();\n        audio.onerror = () => {\n          console.error('오디오 재생 중 오류');\n          resolve();\n        };\n        audio.play();\n      });\n    } catch (error) {\n      console.error('음성 안내 재생 중 오류:', error);\n    }\n  };\n\n  // STT 기능 - 답변 받기\n  const startListening = async field => {\n    if (isProcessing) return;\n    try {\n      setIsProcessing(true);\n      setIsListening(true);\n\n      // 모든 필드에 대해 동일한 녹음 로직 사용\n      const recordingTime = field === 'phone' ? 15000 : 8000; // 전화번호는 15초, 나머지는 8초\n      const silenceThreshold = field === 'phone' ? 8000 : 5000; // 전화번호는 8초, 나머지는 5초 침묵\n\n      return new Promise(async (resolve, reject) => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            audio: true\n          });\n          const mediaRecorder = new MediaRecorder(stream);\n          const audioChunks = [];\n          mediaRecorder.ondataavailable = event => {\n            audioChunks.push(event.data);\n          };\n          mediaRecorder.onstop = async () => {\n            try {\n              const audioBlob = new Blob(audioChunks, {\n                type: 'audio/webm'\n              });\n              let text = await voiceService.speechToText(audioBlob);\n              if (field === 'phone') {\n                // 전화번호의 경우에만 숫자 변환 수행\n                const numbers_only = text.replace(/[^0-9]/g, '');\n                if (numbers_only.length >= 10) {\n                  text = `${numbers_only.slice(0, 3)}-${numbers_only.slice(3, 7)}-${numbers_only.slice(7)}`;\n                } else {\n                  text = numbers_only;\n                }\n              } else if (field === 'address') {\n                // 주소 입력의 경우 주소 매칭\n                const matchResult = await voiceService.matchAddress(text);\n                if (matchResult.matched_address) {\n                  const addr = matchResult.matched_address;\n                  text = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-' + addr.building_sub_num : ''}`;\n                }\n              }\n              // 이름과 나이는 변환 없이 그대로 사용\n\n              setFormData(prev => ({\n                ...prev,\n                [field]: text\n              }));\n              resolve(text);\n            } catch (error) {\n              console.error('음성 인식 오류:', error);\n              reject(error);\n            } finally {\n              setIsListening(false);\n              setIsProcessing(false);\n            }\n          };\n          mediaRecorder.start();\n\n          // 녹음 중지 타이머\n          setTimeout(() => {\n            if (mediaRecorder.state === 'recording') {\n              mediaRecorder.stop();\n            }\n          }, recordingTime);\n\n          // 침묵 감지 로직\n          let lastAudioTime = Date.now();\n          const silenceCheck = setInterval(() => {\n            if (audioChunks.length > 0 && Date.now() - lastAudioTime > silenceThreshold) {\n              clearInterval(silenceCheck);\n              if (mediaRecorder.state === 'recording') {\n                mediaRecorder.stop();\n              }\n            }\n            if (audioChunks.length > 0) {\n              lastAudioTime = Date.now();\n            }\n          }, 1000);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      console.error('음성 입력 오류:', error);\n      setIsListening(false);\n      setIsProcessing(false);\n      throw error;\n    }\n  };\n\n  // handleConfirm 함수 수정\n  const handleConfirm = useCallback(step => {\n    if (!completedSteps.includes(step)) {\n      setCompletedSteps(prev => [...prev, step]);\n      setCurrentStep(step + 1);\n\n      // 다음 섹션으로 스크롤 - sectionsRef 활용\n      setTimeout(() => {\n        if (sectionsRef.current[step + 1]) {\n          sectionsRef.current[step + 1].scrollIntoView({\n            behavior: 'smooth',\n            block: 'start',\n            inline: 'nearest'\n          });\n        }\n      }, 100);\n\n      // 다음 단계의 음성 안내 재생\n      if (step + 1 <= 4) {\n        // 마지막 단계 체크\n        speak(step + 1);\n      }\n    }\n  }, [completedSteps]);\n\n  // 질문 텍스트 가져오기\n  const getQuestionForStep = step => {\n    switch (step) {\n      case 1:\n        return \"이름이 어떻게 되세요?\";\n      case 2:\n        return \"나이가 어떻게 되세요?\";\n      case 3:\n        return \"전화번호가 어떻게 되세요?\";\n      case 4:\n        return \"어디 사세요?\";\n      default:\n        return \"\";\n    }\n  };\n\n  // 나이 선택을 위한 버튼 그룹 컴포넌트\n  const AgeButtonGroup = ({\n    value,\n    onChange,\n    disabled\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hmk-age-buttons\",\n    children: ['50대', '60대', '70대', '80대', '90대 이상'].map(age => /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: `hmk-age-button ${value === age ? 'selected' : ''}`,\n      onClick: () => onChange('age', age),\n      disabled: disabled,\n      children: age\n    }, age, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n\n  // 입력값 변경 핸들러를 메모이제이션\n  const handleInputChange = useCallback((field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n\n  // Section 컴포넌트를 memo로 감싸기\n  const Section = /*#__PURE__*/_s(/*#__PURE__*/memo(_s(({\n    step,\n    question,\n    field,\n    value,\n    onChange,\n    onConfirm,\n    isCompleted\n  }) => {\n    _s();\n    const sectionRef = useRef(null);\n    const [isListening, setIsListening] = useState(false);\n    const [isProcessing, setIsProcessing] = useState(false);\n    useEffect(() => {\n      sectionsRef.current[step] = sectionRef.current;\n    }, [step]);\n\n    // input 변경 핸들러 수정\n    const handleInputChange = e => {\n      onChange(field, e.target.value);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: sectionRef,\n      className: `hmk-sequence-section ${isCompleted ? 'completed' : ''} ${currentStep === step ? 'active' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hmk-sequence-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"hmk-sequence-question\",\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hmk-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: field === 'phone' ? 'tel' : 'text',\n            className: `hmk-sequence-input ${isListening ? 'listening' : ''}`,\n            value: value,\n            onChange: handleInputChange // 수정된 핸들러 사용\n            ,\n            disabled: isListening,\n            placeholder: field === 'phone' ? '전화번호를 입력해주세요' : field === 'address' ? '주소를 입력해주세요' : '입력해주세요'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `hmk-voice-button ${isListening ? 'listening' : ''}`,\n            onClick: handleVoiceInput,\n            disabled: isProcessing,\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faMicrophone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `hmk-confirm-button ${!value ? 'disabled' : ''}`,\n          onClick: () => onConfirm(step),\n          disabled: !value,\n          children: \"\\uD655\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this);\n  }, \"+H0OjjKbk9vte0AZ0RPE63VvpO0=\")), \"+H0OjjKbk9vte0AZ0RPE63VvpO0=\");\n\n  // 컴포넌트 마운트 시 첫 번째 안내 음성 재생\n  useEffect(() => {\n    localStorage.removeItem('resumeFormData');\n    speak(1); // 첫 번째 질문 재생\n    return () => {\n      localStorage.removeItem('resumeFormData');\n    };\n  }, []);\n  const handleVoiceInput = async () => {\n    try {\n      setIsProcessing(true);\n\n      // 1. 음성 녹음 시작\n      await startRecording();\n\n      // 2. 5초 동안 침묵 감지 시작\n      checkSilence(async audioBlob => {\n        if (!audioBlob) return;\n        try {\n          // 3. STT 변환\n          const sttText = await voiceService.speechToText(audioBlob);\n          console.log(\"STT 결과:\", sttText);\n\n          // 4. 주소 매칭\n          const matchResult = await voiceService.matchAddress(sttText);\n          console.log(\"매칭 결과:\", matchResult);\n\n          // 5. 주소 설정\n          if (matchResult.matched_address) {\n            const addr = matchResult.matched_address;\n            const fullAddress = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-' + addr.building_sub_num : ''}`;\n            setFormData(prev => ({\n              ...prev,\n              address: fullAddress\n            }));\n          }\n        } catch (error) {\n          console.error('주소 처리 중 오류:', error);\n        } finally {\n          setIsProcessing(false);\n        }\n      }, 5000); // 5초 침묵 감지\n    } catch (error) {\n      console.error('음성 입력 중 오류:', error);\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hmk-sequence-container\",\n    onSubmit: e => e.preventDefault(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hmk-back-button\",\n        onClick: () => navigate(-1),\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faArrowLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hmk-progress-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hmk-progress-track\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hmk-progress-fill\",\n            style: {\n              width: `${completedSteps.length / 10 * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"hmk-progress-step\",\n          children: [completedSteps.length, \"/10\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sections-container\",\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        step: 1,\n        question: \"\\uC774\\uB984\\uC774 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"name\",\n        value: formData.name,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }, this), completedSteps.includes(1) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 2,\n        question: \"\\uB098\\uC774\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"age\",\n        value: formData.age,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }, this), completedSteps.includes(2) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 3,\n        question: \"\\uC804\\uD654\\uBC88\\uD638\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"phone\",\n        value: formData.phone,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 21\n      }, this), completedSteps.includes(3) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 4,\n        question: \"\\uC5B4\\uB514 \\uC0AC\\uC138\\uC694?\",\n        field: \"address\",\n        value: formData.address,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }, this), isAllCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hmk-submit-button\",\n        onClick: handleSubmit,\n        children: \"\\uC81C\\uCD9C\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 9\n  }, this);\n};\n_s2(ResumeSequence, \"xxng0IlY8DZh/rZZMDz9Oe0DqqQ=\", false, function () {\n  return [useNavigate, useVoiceRecording];\n});\n_c = ResumeSequence;\nexport default ResumeSequence;\nvar _c;\n$RefreshReg$(_c, \"ResumeSequence\");","map":{"version":3,"names":["React","useState","useEffect","useRef","memo","useCallback","useNavigate","FontAwesomeIcon","faMicrophone","faArrowLeft","faCheck","faArrowDown","voiceService","useVoiceRecording","axios","jsxDEV","_jsxDEV","audioGuides","ResumeSequence","_s2","_s","$RefreshSig$","navigate","currentStep","setCurrentStep","formData","setFormData","savedData","localStorage","getItem","JSON","parse","name","age","phone","address","isListening","setIsListening","completedSteps","setCompletedSteps","inputRef","sectionsRef","isRecording","error","startRecording","checkSilence","audioBlob","setAudioBlob","isProcessing","setIsProcessing","setItem","stringify","isAllCompleted","length","handleSubmit","response","post","data","success","removeItem","console","speak","step","audioUrl","audio","Audio","Promise","resolve","onended","onerror","play","startListening","field","recordingTime","silenceThreshold","reject","stream","navigator","mediaDevices","getUserMedia","mediaRecorder","MediaRecorder","audioChunks","ondataavailable","event","push","onstop","Blob","type","text","speechToText","numbers_only","replace","slice","matchResult","matchAddress","matched_address","addr","city","district","town","road_name","building_main_num","building_sub_num","prev","start","setTimeout","state","stop","lastAudioTime","Date","now","silenceCheck","setInterval","clearInterval","handleConfirm","includes","current","scrollIntoView","behavior","block","inline","getQuestionForStep","AgeButtonGroup","value","onChange","disabled","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","handleInputChange","Section","question","onConfirm","isCompleted","sectionRef","e","target","ref","placeholder","handleVoiceInput","icon","sttText","log","fullAddress","onSubmit","preventDefault","style","width","_c","$RefreshReg$"],"sources":["D:/dev/finalproj/react_finalproj/client/src/components/forms/ResumeSequence.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, memo, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMicrophone, faArrowLeft, faCheck, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport '../../assets/css/resumeSequence.css';\r\nimport { voiceService } from '../../api/voiceService';\r\nimport { useVoiceRecording } from '../../hooks/useVoiceRecording';\r\nimport axios from 'axios';\r\n\r\n// 미리 녹음된 안내 음성 파일 import\r\nconst audioGuides = {\r\n    1: '/static/audio/guides/name_question.mp3',    // \"이름이 어떻게 되세요?\"\r\n    2: '/static/audio/guides/age_question.mp3',     // \"나이가 어떻게 되세요?\"\r\n    3: '/static/audio/guides/phone_question.mp3',   // \"전화번호가 어떻게 되세요?\"\r\n    4: '/static/audio/guides/address_question.mp3'  // \"어디 사세요?\"\r\n};\r\n\r\nconst ResumeSequence = () => {\r\n    const navigate = useNavigate();\r\n    const [currentStep, setCurrentStep] = useState(1);\r\n    const [formData, setFormData] = useState(() => {\r\n        // 로컬 스토리지에서 기존 데이터 불러오기\r\n        const savedData = localStorage.getItem('resumeFormData');\r\n        return savedData ? JSON.parse(savedData) : {\r\n            name: '',\r\n            age: '',\r\n            phone: '',\r\n            address: '',\r\n        };\r\n    });\r\n    const [isListening, setIsListening] = useState(false);\r\n    const [completedSteps, setCompletedSteps] = useState([]);\r\n    const inputRef = useRef(null);\r\n    const sectionsRef = useRef([]);\r\n    const { isRecording, error, startRecording, checkSilence } = useVoiceRecording();\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n    // 폼 데이터가 변경될 때마다 로컬 스토리지에 저장\r\n    useEffect(() => {\r\n        localStorage.setItem('resumeFormData', JSON.stringify(formData));\r\n    }, [formData]);\r\n\r\n    // 모든 단계가 완료되었는지 확인\r\n    const isAllCompleted = completedSteps.length === 4;\r\n\r\n    // 폼 제출 처리\r\n    const handleSubmit = async () => {\r\n        try {\r\n            // 서버로 데이터 전송\r\n            const response = await axios.post('http://localhost:8000/api/voice/resume', formData);\r\n            if (response.data.success) {\r\n                // 성공 시 로컬 스토리지 클리어\r\n                localStorage.removeItem('resumeFormData');\r\n                // 다음 페이지로 이동\r\n                navigate('/success');\r\n            }\r\n        } catch (error) {\r\n            console.error('폼 제출 중 오류:', error);\r\n        }\r\n    };\r\n\r\n    // TTS 함수 수정\r\n    const speak = async (step) => {\r\n        try {\r\n            const audioUrl = `http://localhost:8000${audioGuides[step]}`;\r\n            const audio = new Audio(audioUrl);\r\n            \r\n            return new Promise((resolve) => {\r\n                audio.onended = () => resolve();\r\n                audio.onerror = () => {\r\n                    console.error('오디오 재생 중 오류');\r\n                    resolve();\r\n                };\r\n                audio.play();\r\n            });\r\n        } catch (error) {\r\n            console.error('음성 안내 재생 중 오류:', error);\r\n        }\r\n    };\r\n\r\n    // STT 기능 - 답변 받기\r\n    const startListening = async (field) => {\r\n        if (isProcessing) return;\r\n        \r\n        try {\r\n            setIsProcessing(true);\r\n            setIsListening(true);\r\n\r\n            // 모든 필드에 대해 동일한 녹음 로직 사용\r\n            const recordingTime = field === 'phone' ? 15000 : 8000;  // 전화번호는 15초, 나머지는 8초\r\n            const silenceThreshold = field === 'phone' ? 8000 : 5000;  // 전화번호는 8초, 나머지는 5초 침묵\r\n\r\n            return new Promise(async (resolve, reject) => {\r\n                try {\r\n                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n                    const mediaRecorder = new MediaRecorder(stream);\r\n                    const audioChunks = [];\r\n\r\n                    mediaRecorder.ondataavailable = (event) => {\r\n                        audioChunks.push(event.data);\r\n                    };\r\n\r\n                    mediaRecorder.onstop = async () => {\r\n                        try {\r\n                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\r\n                            let text = await voiceService.speechToText(audioBlob);\r\n                            \r\n                            if (field === 'phone') {\r\n                                // 전화번호의 경우에만 숫자 변환 수행\r\n                                const numbers_only = text.replace(/[^0-9]/g, '');\r\n                                if (numbers_only.length >= 10) {\r\n                                    text = `${numbers_only.slice(0,3)}-${numbers_only.slice(3,7)}-${numbers_only.slice(7)}`;\r\n                                } else {\r\n                                    text = numbers_only;\r\n                                }\r\n                            } else if (field === 'address') {\r\n                                // 주소 입력의 경우 주소 매칭\r\n                                const matchResult = await voiceService.matchAddress(text);\r\n                                if (matchResult.matched_address) {\r\n                                    const addr = matchResult.matched_address;\r\n                                    text = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-'+addr.building_sub_num : ''}`;\r\n                                }\r\n                            }\r\n                            // 이름과 나이는 변환 없이 그대로 사용\r\n\r\n                            setFormData(prev => ({...prev, [field]: text}));\r\n                            resolve(text);\r\n                        } catch (error) {\r\n                            console.error('음성 인식 오류:', error);\r\n                            reject(error);\r\n                        } finally {\r\n                            setIsListening(false);\r\n                            setIsProcessing(false);\r\n                        }\r\n                    };\r\n\r\n                    mediaRecorder.start();\r\n\r\n                    // 녹음 중지 타이머\r\n                    setTimeout(() => {\r\n                        if (mediaRecorder.state === 'recording') {\r\n                            mediaRecorder.stop();\r\n                        }\r\n                    }, recordingTime);\r\n\r\n                    // 침묵 감지 로직\r\n                    let lastAudioTime = Date.now();\r\n                    const silenceCheck = setInterval(() => {\r\n                        if (audioChunks.length > 0 && Date.now() - lastAudioTime > silenceThreshold) {\r\n                            clearInterval(silenceCheck);\r\n                            if (mediaRecorder.state === 'recording') {\r\n                                mediaRecorder.stop();\r\n                            }\r\n                        }\r\n                        if (audioChunks.length > 0) {\r\n                            lastAudioTime = Date.now();\r\n                        }\r\n                    }, 1000);\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('음성 입력 오류:', error);\r\n            setIsListening(false);\r\n            setIsProcessing(false);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // handleConfirm 함수 수정\r\n    const handleConfirm = useCallback((step) => {\r\n        if (!completedSteps.includes(step)) {\r\n            setCompletedSteps(prev => [...prev, step]);\r\n            setCurrentStep(step + 1);\r\n            \r\n            // 다음 섹션으로 스크롤 - sectionsRef 활용\r\n            setTimeout(() => {\r\n                if (sectionsRef.current[step + 1]) {\r\n                    sectionsRef.current[step + 1].scrollIntoView({\r\n                        behavior: 'smooth',\r\n                        block: 'start',\r\n                        inline: 'nearest'\r\n                    });\r\n                }\r\n            }, 100);\r\n\r\n            // 다음 단계의 음성 안내 재생\r\n            if (step + 1 <= 4) {  // 마지막 단계 체크\r\n                speak(step + 1);\r\n            }\r\n        }\r\n    }, [completedSteps]);\r\n\r\n    // 질문 텍스트 가져오기\r\n    const getQuestionForStep = (step) => {\r\n        switch (step) {\r\n            case 1:\r\n                return \"이름이 어떻게 되세요?\";\r\n            case 2:\r\n                return \"나이가 어떻게 되세요?\";\r\n            case 3:\r\n                return \"전화번호가 어떻게 되세요?\";\r\n            case 4:\r\n                return \"어디 사세요?\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    };\r\n\r\n    // 나이 선택을 위한 버튼 그룹 컴포넌트\r\n    const AgeButtonGroup = ({ value, onChange, disabled }) => (\r\n        <div className=\"hmk-age-buttons\">\r\n            {['50대', '60대', '70대', '80대', '90대 이상'].map((age) => (\r\n                <button\r\n                    key={age}\r\n                    type=\"button\"\r\n                    className={`hmk-age-button ${value === age ? 'selected' : ''}`}\r\n                    onClick={() => onChange('age', age)}\r\n                    disabled={disabled}\r\n                >\r\n                    {age}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    // 입력값 변경 핸들러를 메모이제이션\r\n    const handleInputChange = useCallback((field, value) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [field]: value\r\n        }));\r\n    }, []);\r\n\r\n    // Section 컴포넌트를 memo로 감싸기\r\n    const Section = memo(({ step, question, field, value, onChange, onConfirm, isCompleted }) => {\r\n        const sectionRef = useRef(null);\r\n        const [isListening, setIsListening] = useState(false);\r\n        const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n        useEffect(() => {\r\n            sectionsRef.current[step] = sectionRef.current;\r\n        }, [step]);\r\n\r\n        // input 변경 핸들러 수정\r\n        const handleInputChange = (e) => {\r\n            onChange(field, e.target.value);\r\n        };\r\n\r\n        return (\r\n            <div \r\n                ref={sectionRef}\r\n                className={`hmk-sequence-section ${isCompleted ? 'completed' : ''} ${currentStep === step ? 'active' : ''}`}\r\n            >\r\n                <div className=\"hmk-sequence-content\">\r\n                    <h2 className=\"hmk-sequence-question\">{question}</h2>\r\n                    <div className=\"hmk-input-container\">\r\n                        <input\r\n                            type={field === 'phone' ? 'tel' : 'text'}\r\n                            className={`hmk-sequence-input ${isListening ? 'listening' : ''}`}\r\n                            value={value}\r\n                            onChange={handleInputChange}  // 수정된 핸들러 사용\r\n                            disabled={isListening}\r\n                            placeholder={field === 'phone' ? '전화번호를 입력해주세요' : \r\n                                       field === 'address' ? '주소를 입력해주세요' : '입력해주세요'}\r\n                        />\r\n                        <button \r\n                            className={`hmk-voice-button ${isListening ? 'listening' : ''}`}\r\n                            onClick={handleVoiceInput}\r\n                            disabled={isProcessing}\r\n                        >\r\n                            <FontAwesomeIcon icon={faMicrophone} />\r\n                        </button>\r\n                    </div>\r\n                    <button \r\n                        className={`hmk-confirm-button ${!value ? 'disabled' : ''}`}\r\n                        onClick={() => onConfirm(step)}\r\n                        disabled={!value}\r\n                    >\r\n                        확인\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    // 컴포넌트 마운트 시 첫 번째 안내 음성 재생\r\n    useEffect(() => {\r\n        localStorage.removeItem('resumeFormData');\r\n        speak(1);  // 첫 번째 질문 재생\r\n        return () => {\r\n            localStorage.removeItem('resumeFormData');\r\n        };\r\n    }, []);\r\n\r\n    const handleVoiceInput = async () => {\r\n        try {\r\n            setIsProcessing(true);\r\n            \r\n            // 1. 음성 녹음 시작\r\n            await startRecording();\r\n            \r\n            // 2. 5초 동안 침묵 감지 시작\r\n            checkSilence(async (audioBlob) => {\r\n                if (!audioBlob) return;\r\n                \r\n                try {\r\n                    // 3. STT 변환\r\n                    const sttText = await voiceService.speechToText(audioBlob);\r\n                    console.log(\"STT 결과:\", sttText);\r\n                    \r\n                    // 4. 주소 매칭\r\n                    const matchResult = await voiceService.matchAddress(sttText);\r\n                    console.log(\"매칭 결과:\", matchResult);\r\n                    \r\n                    // 5. 주소 설정\r\n                    if (matchResult.matched_address) {\r\n                        const addr = matchResult.matched_address;\r\n                        const fullAddress = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-'+addr.building_sub_num : ''}`;\r\n                        setFormData(prev => ({...prev, address: fullAddress}));\r\n                    }\r\n                } catch (error) {\r\n                    console.error('주소 처리 중 오류:', error);\r\n                } finally {\r\n                    setIsProcessing(false);\r\n                }\r\n            }, 5000); // 5초 침묵 감지\r\n            \r\n        } catch (error) {\r\n            console.error('음성 입력 중 오류:', error);\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div \r\n            className=\"hmk-sequence-container\"\r\n            onSubmit={e => e.preventDefault()}\r\n        >\r\n            <div className=\"hmk-sequence-header\">\r\n                <button \r\n                    className=\"hmk-back-button\"\r\n                    onClick={() => navigate(-1)}\r\n                >\r\n                    <FontAwesomeIcon icon={faArrowLeft} />\r\n                </button>\r\n                <div className=\"hmk-progress-bar\">\r\n                    <div className=\"hmk-progress-track\">\r\n                        <div \r\n                            className=\"hmk-progress-fill\"\r\n                            style={{ width: `${(completedSteps.length / 10) * 100}%` }}\r\n                        ></div>\r\n                    </div>\r\n                    <span className=\"hmk-progress-step\">{completedSteps.length}/10</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"hmk-sections-container\">\r\n                <Section \r\n                    step={1}\r\n                    question=\"이름이 어떻게 되세요?\"\r\n                    field=\"name\"\r\n                    value={formData.name}\r\n                    onChange={handleInputChange}\r\n                    onConfirm={handleConfirm}\r\n                    isCompleted={completedSteps.includes(1)}\r\n                />\r\n                {completedSteps.includes(1) && (\r\n                    <Section \r\n                        step={2}\r\n                        question=\"나이가 어떻게 되세요?\"\r\n                        field=\"age\"\r\n                        value={formData.age}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(2)}\r\n                    />\r\n                )}\r\n                {completedSteps.includes(2) && (\r\n                    <Section \r\n                        step={3}\r\n                        question=\"전화번호가 어떻게 되세요?\"\r\n                        field=\"phone\"\r\n                        value={formData.phone}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(3)}\r\n                    />\r\n                )}\r\n                {completedSteps.includes(3) && (\r\n                    <Section \r\n                        step={4}\r\n                        question=\"어디 사세요?\"\r\n                        field=\"address\"\r\n                        value={formData.address}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(4)}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            {/* 모든 단계가 완료되면 제출 버튼 표시 */}\r\n            {isAllCompleted && (\r\n                <div className=\"hmk-sequence-footer\">\r\n                    <button \r\n                        className=\"hmk-submit-button\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        제출하기\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResumeSequence; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}