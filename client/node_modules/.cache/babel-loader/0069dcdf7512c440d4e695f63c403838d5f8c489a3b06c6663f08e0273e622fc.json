{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\finalproj\\\\react_finalproj\\\\client\\\\src\\\\components\\\\manage\\\\chatbot\\\\APIKeyManagement.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIKeyManagement = ({\n  selectedAPI,\n  onApiKeyChange\n}) => {\n  _s();\n  const [apiKey, setApiKey] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [hasStoredKey, setHasStoredKey] = useState(false);\n\n  // API 키 저장\n  const handleSave = async () => {\n    try {\n      const response = await fetch(`http://localhost:4000/api/apiKeys/${selectedAPI}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          apiKey\n        }),\n        credentials: 'include'\n      });\n      if (response.ok) {\n        setIsEditing(false);\n        setHasStoredKey(true);\n        setApiKey(''); // 보안을 위해 클라이언트의 메모리에서 제거\n        onApiKeyChange(selectedAPI); // API 제공자 정보만 전달\n      } else {\n        alert('API 키 저장에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('API 키 저장 오류:', error);\n      alert('API 키 저장 중 오류가 발생했습니다.');\n    }\n  };\n\n  // API 키 삭제\n  const handleDelete = async () => {\n    try {\n      const response = await fetch(`http://localhost:4000/api/apiKeys/${selectedAPI}`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      if (response.ok) {\n        setHasStoredKey(false);\n        setApiKey('');\n        onApiKeyChange(null);\n      }\n    } catch (error) {\n      console.error('API 키 삭제 오류:', error);\n      alert('API 키 삭제 중 오류가 발생했습니다.');\n    }\n  };\n\n  // API 키 존재 여부 확인\n  useEffect(() => {\n    const checkApiKey = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/apiKeys/${selectedAPI}`, {\n          credentials: 'include'\n        });\n        const data = await response.json();\n        setHasStoredKey(data.exists);\n      } catch (error) {\n        console.error('API 키 확인 오류:', error);\n      }\n    };\n    checkApiKey();\n  }, [selectedAPI]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hmk-manage-api-key\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"API \\uD0A4 \\uAD00\\uB9AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-manage-api-key-content\",\n      children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hmk-manage-api-key-edit\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: apiKey,\n          onChange: e => setApiKey(e.target.value),\n          placeholder: `${selectedAPI} API 키 입력`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hmk-manage-button\",\n          onClick: handleSave,\n          children: \"\\uC800\\uC7A5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hmk-manage-button\",\n          onClick: () => setIsEditing(false),\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hmk-manage-api-key-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: hasStoredKey ? '••••••••' : 'API 키가 설정되지 않았습니다'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hmk-manage-button\",\n          onClick: () => setIsEditing(true),\n          children: hasStoredKey ? '수정' : '추가'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), hasStoredKey && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hmk-manage-button danger\",\n          onClick: handleDelete,\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(APIKeyManagement, \"MqGJywCcWmNL7a1kyZBy9Gm4l4k=\");\n_c = APIKeyManagement;\nexport default APIKeyManagement;\nvar _c;\n$RefreshReg$(_c, \"APIKeyManagement\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","APIKeyManagement","selectedAPI","onApiKeyChange","_s","apiKey","setApiKey","isEditing","setIsEditing","hasStoredKey","setHasStoredKey","handleSave","response","fetch","method","headers","body","JSON","stringify","credentials","ok","alert","error","console","handleDelete","checkApiKey","data","json","exists","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/dev/finalproj/react_finalproj/client/src/components/manage/chatbot/APIKeyManagement.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst APIKeyManagement = ({ selectedAPI, onApiKeyChange }) => {\r\n    const [apiKey, setApiKey] = useState('');\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [hasStoredKey, setHasStoredKey] = useState(false);\r\n\r\n    // API 키 저장\r\n    const handleSave = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:4000/api/apiKeys/${selectedAPI}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ apiKey }),\r\n                credentials: 'include'\r\n            });\r\n\r\n            if (response.ok) {\r\n                setIsEditing(false);\r\n                setHasStoredKey(true);\r\n                setApiKey(''); // 보안을 위해 클라이언트의 메모리에서 제거\r\n                onApiKeyChange(selectedAPI); // API 제공자 정보만 전달\r\n            } else {\r\n                alert('API 키 저장에 실패했습니다.');\r\n            }\r\n        } catch (error) {\r\n            console.error('API 키 저장 오류:', error);\r\n            alert('API 키 저장 중 오류가 발생했습니다.');\r\n        }\r\n    };\r\n\r\n    // API 키 삭제\r\n    const handleDelete = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:4000/api/apiKeys/${selectedAPI}`, {\r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n            });\r\n\r\n            if (response.ok) {\r\n                setHasStoredKey(false);\r\n                setApiKey('');\r\n                onApiKeyChange(null);\r\n            }\r\n        } catch (error) {\r\n            console.error('API 키 삭제 오류:', error);\r\n            alert('API 키 삭제 중 오류가 발생했습니다.');\r\n        }\r\n    };\r\n\r\n    // API 키 존재 여부 확인\r\n    useEffect(() => {\r\n        const checkApiKey = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:4000/api/apiKeys/${selectedAPI}`, {\r\n                    credentials: 'include'\r\n                });\r\n                const data = await response.json();\r\n                setHasStoredKey(data.exists);\r\n            } catch (error) {\r\n                console.error('API 키 확인 오류:', error);\r\n            }\r\n        };\r\n\r\n        checkApiKey();\r\n    }, [selectedAPI]);\r\n\r\n    return (\r\n        <div className=\"hmk-manage-api-key\">\r\n            <h3>API 키 관리</h3>\r\n            <div className=\"hmk-manage-api-key-content\">\r\n                {isEditing ? (\r\n                    <div className=\"hmk-manage-api-key-edit\">\r\n                        <input\r\n                            type=\"password\"\r\n                            value={apiKey}\r\n                            onChange={(e) => setApiKey(e.target.value)}\r\n                            placeholder={`${selectedAPI} API 키 입력`}\r\n                        />\r\n                        <button \r\n                            className=\"hmk-manage-button\"\r\n                            onClick={handleSave}\r\n                        >\r\n                            저장\r\n                        </button>\r\n                        <button \r\n                            className=\"hmk-manage-button\"\r\n                            onClick={() => setIsEditing(false)}\r\n                        >\r\n                            취소\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"hmk-manage-api-key-display\">\r\n                        <span>{hasStoredKey ? '••••••••' : 'API 키가 설정되지 않았습니다'}</span>\r\n                        <button \r\n                            className=\"hmk-manage-button\"\r\n                            onClick={() => setIsEditing(true)}\r\n                        >\r\n                            {hasStoredKey ? '수정' : '추가'}\r\n                        </button>\r\n                        {hasStoredKey && (\r\n                            <button \r\n                                className=\"hmk-manage-button danger\"\r\n                                onClick={handleDelete}\r\n                            >\r\n                                삭제\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default APIKeyManagement; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}