{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const useFormData = () => {\n  _s();\n  const initialFormData = {\n    // 기본 정보\n    name: '',\n    title: '',\n    residentNumber1: '',\n    residentNumber2: '',\n    address: '',\n    homePhone: '',\n    mobilePhone: '',\n    familyPhone: '',\n    postcode: '',\n    detailAddress: '',\n    photo: null,\n    // 최종학력\n    education: '',\n    // 세대구성 형태\n    householdType: '',\n    // 동거가족\n    familyMembers: '',\n    spouse: '',\n    children: '',\n    grandchildren: '',\n    // 일자리사업 참여경력\n    workExperience: {\n      isNew: false,\n      years: []\n    },\n    // 기초생활수급권자\n    basicLivingRecipient: '',\n    // 경제상태\n    economicStatus: '',\n    // 주거형태\n    housingType: '',\n    // 건강상태\n    healthStatus: '',\n    // 참여희망사업\n    desiredPrograms: {\n      first: '',\n      second: '',\n      third: ''\n    },\n    // 신청동기\n    applicationMotives: [],\n    // 자원봉사 참여\n    volunteerWork: {\n      participated: false,\n      healthInsurance: ''\n    },\n    // 기초노령연금\n    basicPensionStatus: {\n      receiving: false,\n      amount: ''\n    },\n    // 장기요양\n    longTermCare: {\n      status: false\n    }\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [photoPreview, setPhotoPreview] = useState(null);\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    if (name.includes('.')) {\n      const [parent, child] = name.split('.');\n      setFormData(prev => ({\n        ...prev,\n        [parent]: {\n          ...prev[parent],\n          [child]: type === 'checkbox' ? checked : value\n        }\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [name]: type === 'checkbox' ? checked : value\n      }));\n    }\n  };\n  const handlePhotoCapture = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setFormData(prev => ({\n        ...prev,\n        photo: file\n      }));\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPhotoPreview(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handlePostcodeSearch = () => {\n    new window.daum.Postcode({\n      oncomplete: function (data) {\n        setFormData(prev => ({\n          ...prev,\n          postcode: data.zonecode,\n          address: data.address,\n          detailAddress: ''\n        }));\n      }\n    }).open();\n  };\n  const handleEducationSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      education: value\n    }));\n  };\n  const handleHouseholdSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      householdType: value,\n      ...(['독신', '기타'].includes(value) ? {\n        spouse: false,\n        children: false,\n        grandchildren: false,\n        childrenCount: 0,\n        grandchildrenCount: 0\n      } : {})\n    }));\n  };\n  const handleFamilyMemberSelect = memberType => {\n    setFormData(prev => ({\n      ...prev,\n      [memberType]: !prev[memberType],\n      [`${memberType}Count`]: prev[memberType] ? 0 : memberType === 'spouse' ? 1 : prev[`${memberType}Count`] || 0\n    }));\n  };\n  const handleFamilyMemberCount = (memberType, action) => {\n    setFormData(prev => ({\n      ...prev,\n      [`${memberType}Count`]: Math.max(0, prev[`${memberType}Count`] + (action === 'increase' ? 1 : -1))\n    }));\n  };\n  const handleMotiveSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      applicationMotives: prev.applicationMotives.includes(value) ? prev.applicationMotives.filter(v => v !== value) : [...prev.applicationMotives, value]\n    }));\n  };\n  const handleHealthSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      healthStatus: value\n    }));\n  };\n  const handleEconomicSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      economicStatus: value\n    }));\n  };\n  const handleBasicLivingSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      basicLivingRecipient: value\n    }));\n  };\n  const handleBasicPensionSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      basicPensionStatus: {\n        ...prev.basicPensionStatus,\n        receiving: value\n      }\n    }));\n  };\n  const handleLongTermCareSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      longTermCare: {\n        ...prev.longTermCare,\n        status: value\n      }\n    }));\n  };\n  const handleHousingTypeSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      housingType: value\n    }));\n  };\n  const handleHealthInsuranceSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      volunteerWork: {\n        ...prev.volunteerWork,\n        healthInsurance: String(value)\n      }\n    }));\n  };\n  const handleWorkExperienceSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      workExperience: {\n        ...prev.workExperience,\n        isNew: value,\n        years: value ? prev.workExperience.years : []\n      }\n    }));\n  };\n  const handleVolunteerSelect = value => {\n    setFormData(prev => ({\n      ...prev,\n      volunteerWork: {\n        ...prev.volunteerWork,\n        participated: value\n      }\n    }));\n  };\n  const handleYearSelect = year => {\n    setFormData(prev => ({\n      ...prev,\n      workExperience: {\n        ...prev.workExperience,\n        years: prev.workExperience.years.includes(year) ? prev.workExperience.years.filter(y => y !== year) : [...prev.workExperience.years, year]\n      }\n    }));\n  };\n  return {\n    formData,\n    photoPreview,\n    handleChange,\n    handlePhotoCapture,\n    handlePostcodeSearch,\n    handleEducationSelect,\n    handleHouseholdSelect,\n    handleFamilyMemberSelect,\n    handleFamilyMemberCount,\n    handleMotiveSelect,\n    handleHealthSelect,\n    handleEconomicSelect,\n    handleBasicLivingSelect,\n    handleBasicPensionSelect,\n    handleLongTermCareSelect,\n    handleHousingTypeSelect,\n    handleHealthInsuranceSelect,\n    handleWorkExperienceSelect,\n    handleVolunteerSelect,\n    handleYearSelect\n  };\n};\n_s(useFormData, \"AFaRgqhZ+o9/8s7Yd7uLHasYt+w=\");","map":{"version":3,"names":["useState","useFormData","_s","initialFormData","name","title","residentNumber1","residentNumber2","address","homePhone","mobilePhone","familyPhone","postcode","detailAddress","photo","education","householdType","familyMembers","spouse","children","grandchildren","workExperience","isNew","years","basicLivingRecipient","economicStatus","housingType","healthStatus","desiredPrograms","first","second","third","applicationMotives","volunteerWork","participated","healthInsurance","basicPensionStatus","receiving","amount","longTermCare","status","formData","setFormData","photoPreview","setPhotoPreview","handleChange","e","value","type","checked","target","includes","parent","child","split","prev","handlePhotoCapture","file","files","reader","FileReader","onloadend","result","readAsDataURL","handlePostcodeSearch","window","daum","Postcode","oncomplete","data","zonecode","open","handleEducationSelect","handleHouseholdSelect","childrenCount","grandchildrenCount","handleFamilyMemberSelect","memberType","handleFamilyMemberCount","action","Math","max","handleMotiveSelect","filter","v","handleHealthSelect","handleEconomicSelect","handleBasicLivingSelect","handleBasicPensionSelect","handleLongTermCareSelect","handleHousingTypeSelect","handleHealthInsuranceSelect","String","handleWorkExperienceSelect","handleVolunteerSelect","handleYearSelect","year","y"],"sources":["D:/dev/finalproj/react_finalproj/src/hooks/useFormData.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nexport const useFormData = () => {\r\n  const initialFormData = {\r\n    // 기본 정보\r\n    name: '',\r\n    title: '',\r\n    residentNumber1: '',\r\n    residentNumber2: '',\r\n    address: '',\r\n    homePhone: '',\r\n    mobilePhone: '',\r\n    familyPhone: '',\r\n    postcode: '',\r\n    detailAddress: '',\r\n    photo: null,\r\n    \r\n    // 최종학력\r\n    education: '',\r\n    \r\n    // 세대구성 형태\r\n    householdType: '',\r\n    \r\n    // 동거가족\r\n    familyMembers: '',\r\n    spouse: '',\r\n    children: '',\r\n    grandchildren: '',\r\n    \r\n    // 일자리사업 참여경력\r\n    workExperience: {\r\n      isNew: false,\r\n      years: []\r\n    },\r\n    \r\n    // 기초생활수급권자\r\n    basicLivingRecipient: '',\r\n    \r\n    // 경제상태\r\n    economicStatus: '',\r\n    \r\n    // 주거형태\r\n    housingType: '',\r\n    \r\n    // 건강상태\r\n    healthStatus: '',\r\n    \r\n    // 참여희망사업\r\n    desiredPrograms: {\r\n      first: '',\r\n      second: '',\r\n      third: ''\r\n    },\r\n    \r\n    // 신청동기\r\n    applicationMotives: [],\r\n    \r\n    // 자원봉사 참여\r\n    volunteerWork: {\r\n      participated: false,\r\n      healthInsurance: ''\r\n    },\r\n    \r\n    // 기초노령연금\r\n    basicPensionStatus: {\r\n      receiving: false,\r\n      amount: ''\r\n    },\r\n    \r\n    // 장기요양\r\n    longTermCare: {\r\n      status: false\r\n    }\r\n  };\r\n\r\n  const [formData, setFormData] = useState(initialFormData);\r\n\r\n  const [photoPreview, setPhotoPreview] = useState(null);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    \r\n    if (name.includes('.')) {\r\n      const [parent, child] = name.split('.');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [parent]: {\r\n          ...prev[parent],\r\n          [child]: type === 'checkbox' ? checked : value\r\n        }\r\n      }));\r\n    } else {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [name]: type === 'checkbox' ? checked : value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handlePhotoCapture = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setFormData(prev => ({ ...prev, photo: file }));\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setPhotoPreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handlePostcodeSearch = () => {\r\n    new window.daum.Postcode({\r\n      oncomplete: function(data) {\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          postcode: data.zonecode,\r\n          address: data.address,\r\n          detailAddress: '',\r\n        }));\r\n      }\r\n    }).open();\r\n  };\r\n\r\n  const handleEducationSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      education: value\r\n    }));\r\n  };\r\n\r\n  const handleHouseholdSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      householdType: value,\r\n      ...((['독신', '기타'].includes(value)) ? {\r\n        spouse: false,\r\n        children: false,\r\n        grandchildren: false,\r\n        childrenCount: 0,\r\n        grandchildrenCount: 0\r\n      } : {})\r\n    }));\r\n  };\r\n\r\n  const handleFamilyMemberSelect = (memberType) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [memberType]: !prev[memberType],\r\n      [`${memberType}Count`]: prev[memberType] ? 0 : (memberType === 'spouse' ? 1 : prev[`${memberType}Count`] || 0)\r\n    }));\r\n  };\r\n\r\n  const handleFamilyMemberCount = (memberType, action) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [`${memberType}Count`]: Math.max(\r\n        0,\r\n        prev[`${memberType}Count`] + (action === 'increase' ? 1 : -1)\r\n      )\r\n    }));\r\n  };\r\n\r\n  const handleMotiveSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      applicationMotives: prev.applicationMotives.includes(value)\r\n        ? prev.applicationMotives.filter(v => v !== value)\r\n        : [...prev.applicationMotives, value]\r\n    }));\r\n  };\r\n\r\n  const handleHealthSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      healthStatus: value\r\n    }));\r\n  };\r\n\r\n  const handleEconomicSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      economicStatus: value\r\n    }));\r\n  };\r\n\r\n  const handleBasicLivingSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      basicLivingRecipient: value\r\n    }));\r\n  };\r\n\r\n  const handleBasicPensionSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      basicPensionStatus: {\r\n        ...prev.basicPensionStatus,\r\n        receiving: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleLongTermCareSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      longTermCare: {\r\n        ...prev.longTermCare,\r\n        status: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleHousingTypeSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      housingType: value\r\n    }));\r\n  };\r\n\r\n  const handleHealthInsuranceSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      volunteerWork: {\r\n        ...prev.volunteerWork,\r\n        healthInsurance: String(value)\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleWorkExperienceSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      workExperience: {\r\n        ...prev.workExperience,\r\n        isNew: value,\r\n        years: value ? prev.workExperience.years : []\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleVolunteerSelect = (value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      volunteerWork: {\r\n        ...prev.volunteerWork,\r\n        participated: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleYearSelect = (year) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      workExperience: {\r\n        ...prev.workExperience,\r\n        years: prev.workExperience.years.includes(year)\r\n          ? prev.workExperience.years.filter(y => y !== year)\r\n          : [...prev.workExperience.years, year]\r\n      }\r\n    }));\r\n  };\r\n\r\n  return {\r\n    formData,\r\n    photoPreview,\r\n    handleChange,\r\n    handlePhotoCapture,\r\n    handlePostcodeSearch,\r\n    handleEducationSelect,\r\n    handleHouseholdSelect,\r\n    handleFamilyMemberSelect,\r\n    handleFamilyMemberCount,\r\n    handleMotiveSelect,\r\n    handleHealthSelect,\r\n    handleEconomicSelect,\r\n    handleBasicLivingSelect,\r\n    handleBasicPensionSelect,\r\n    handleLongTermCareSelect,\r\n    handleHousingTypeSelect,\r\n    handleHealthInsuranceSelect,\r\n    handleWorkExperienceSelect,\r\n    handleVolunteerSelect,\r\n    handleYearSelect,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}