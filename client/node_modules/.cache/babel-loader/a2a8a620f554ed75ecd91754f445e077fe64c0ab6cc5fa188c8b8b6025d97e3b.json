{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { voiceService } from '../api/voiceService';\nexport const useVoiceRecording = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [error, setError] = useState(null);\n  const startRecording = useCallback(async () => {\n    try {\n      setIsRecording(true);\n      setError(null);\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      const audioChunks = [];\n      mediaRecorder.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/wav'\n        });\n        try {\n          const text = await voiceService.speechToText(audioBlob);\n          return text;\n        } catch (err) {\n          setError('음성 인식에 실패했습니다.');\n          console.error(err);\n        } finally {\n          setIsRecording(false);\n        }\n      };\n      mediaRecorder.start();\n      return mediaRecorder;\n    } catch (err) {\n      setError('마이크 접근에 실패했습니다.');\n      setIsRecording(false);\n      console.error(err);\n    }\n  }, []);\n  return {\n    isRecording,\n    error,\n    startRecording\n  };\n};\n_s(useVoiceRecording, \"HVrYlSSy98hLRyzSdRkKN1P/73U=\");","map":{"version":3,"names":["useState","useCallback","voiceService","useVoiceRecording","_s","isRecording","setIsRecording","error","setError","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","audioChunks","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","text","speechToText","err","console","start"],"sources":["D:/dev/finalproj/react_finalproj/client/src/hooks/useVoiceRecording.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { voiceService } from '../api/voiceService';\r\n\r\nexport const useVoiceRecording = () => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const startRecording = useCallback(async () => {\r\n        try {\r\n            setIsRecording(true);\r\n            setError(null);\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            const mediaRecorder = new MediaRecorder(stream);\r\n            const audioChunks = [];\r\n\r\n            mediaRecorder.ondataavailable = (event) => {\r\n                audioChunks.push(event.data);\r\n            };\r\n\r\n            mediaRecorder.onstop = async () => {\r\n                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\r\n                try {\r\n                    const text = await voiceService.speechToText(audioBlob);\r\n                    return text;\r\n                } catch (err) {\r\n                    setError('음성 인식에 실패했습니다.');\r\n                    console.error(err);\r\n                } finally {\r\n                    setIsRecording(false);\r\n                }\r\n            };\r\n\r\n            mediaRecorder.start();\r\n            return mediaRecorder;\r\n        } catch (err) {\r\n            setError('마이크 접근에 실패했습니다.');\r\n            setIsRecording(false);\r\n            console.error(err);\r\n        }\r\n    }, []);\r\n\r\n    return { isRecording, error, startRecording };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,YAAY,QAAQ,qBAAqB;AAElD,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,cAAc,GAAGR,WAAW,CAAC,YAAY;IAC3C,IAAI;MACAK,cAAc,CAAC,IAAI,CAAC;MACpBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAME,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzE,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;MAC/C,MAAMO,WAAW,GAAG,EAAE;MAEtBF,aAAa,CAACG,eAAe,GAAIC,KAAK,IAAK;QACvCF,WAAW,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;MAChC,CAAC;MAEDN,aAAa,CAACO,MAAM,GAAG,YAAY;QAC/B,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACP,WAAW,EAAE;UAAEQ,IAAI,EAAE;QAAY,CAAC,CAAC;QAC9D,IAAI;UACA,MAAMC,IAAI,GAAG,MAAMxB,YAAY,CAACyB,YAAY,CAACJ,SAAS,CAAC;UACvD,OAAOG,IAAI;QACf,CAAC,CAAC,OAAOE,GAAG,EAAE;UACVpB,QAAQ,CAAC,gBAAgB,CAAC;UAC1BqB,OAAO,CAACtB,KAAK,CAACqB,GAAG,CAAC;QACtB,CAAC,SAAS;UACNtB,cAAc,CAAC,KAAK,CAAC;QACzB;MACJ,CAAC;MAEDS,aAAa,CAACe,KAAK,CAAC,CAAC;MACrB,OAAOf,aAAa;IACxB,CAAC,CAAC,OAAOa,GAAG,EAAE;MACVpB,QAAQ,CAAC,iBAAiB,CAAC;MAC3BF,cAAc,CAAC,KAAK,CAAC;MACrBuB,OAAO,CAACtB,KAAK,CAACqB,GAAG,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEvB,WAAW;IAAEE,KAAK;IAAEE;EAAe,CAAC;AACjD,CAAC;AAACL,EAAA,CAxCWD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}