{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\finalproj\\\\react_finalproj\\\\client\\\\src\\\\components\\\\forms\\\\ResumeSequence.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, memo, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faArrowLeft, faCheck, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport '../../assets/css/resumeSequence.css';\nimport { voiceService } from '../../api/voiceService';\nimport { useVoiceRecording } from '../../hooks/useVoiceRecording';\nimport axios from 'axios';\n\n// 미리 녹음된 안내 음성 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst audioGuides = {\n  1: '/static/audio/guides/name_question.mp3',\n  // \"이름이 어떻게 되세요?\"\n  2: '/static/audio/guides/age_question.mp3',\n  // \"나이가 어떻게 되세요?\"\n  3: '/static/audio/guides/phone_question.mp3',\n  // \"전화번호가 어떻게 되세요?\"\n  4: '/static/audio/guides/address_question.mp3' // \"어디 사세요?\"\n};\n\n// Section 컴포넌트를 파일 최상단으로 분리\nconst Section = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  step,\n  question,\n  field,\n  value,\n  onChange,\n  onConfirm,\n  isCompleted,\n  currentStep\n}) => {\n  _s();\n  const sectionRef = useRef(null);\n\n  // 순수 함수로 핸들러 정의\n  const handleChange = e => {\n    onChange(field, e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: sectionRef,\n    className: `hmk-sequence-section ${isCompleted ? 'completed' : ''} ${currentStep === step ? 'active' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"hmk-sequence-question\",\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hmk-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: field === 'phone' ? 'tel' : 'text',\n          className: \"hmk-sequence-input\",\n          value: value,\n          onChange: handleChange,\n          placeholder: field === 'phone' ? '전화번호를 입력해주세요' : field === 'address' ? '주소를 입력해주세요' : '입력해주세요'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hmk-voice-button\",\n          onClick: () => onConfirm(step),\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faMicrophone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), value && value.trim() && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hmk-confirm-button\",\n        onClick: () => onConfirm(step),\n        children: \"\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}, \"OElGdF/BJY7Zok+h4VfeqRy4y3Y=\")), \"OElGdF/BJY7Zok+h4VfeqRy4y3Y=\");\n_c2 = Section;\nconst ResumeSequence = () => {\n  _s2();\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState(() => {\n    // 로컬 스토리지에서 기존 데이터 불러오기\n    const savedData = localStorage.getItem('resumeFormData');\n    return savedData ? JSON.parse(savedData) : {\n      name: '',\n      age: '',\n      phone: '',\n      address: ''\n    };\n  });\n  const [isListening, setIsListening] = useState(false);\n  const [completedSteps, setCompletedSteps] = useState([]);\n  const sectionsRef = useRef([]);\n  const {\n    isRecording,\n    error,\n    startRecording,\n    checkSilence\n  } = useVoiceRecording();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 폼 데이터가 변경될 때마다 로컬 스토리지에 저장\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      localStorage.setItem('resumeFormData', JSON.stringify(formData));\n    }, 500); // 디바운스 시간 설정\n\n    return () => clearTimeout(timer);\n  }, [formData]);\n\n  // 모든 단계가 완료되었는지 확인\n  const isAllCompleted = completedSteps.length === 4;\n\n  // 폼 제출 처리\n  const handleSubmit = async () => {\n    try {\n      // 서버로 데이터 전송\n      const response = await axios.post('http://localhost:8000/api/voice/resume', formData);\n      if (response.data.success) {\n        // 성공 시 로컬 스토리지 클리어\n        localStorage.removeItem('resumeFormData');\n        // 다음 페이지로 이동\n        navigate('/success');\n      }\n    } catch (error) {\n      console.error('폼 제출 중 오류:', error);\n    }\n  };\n\n  // speak 함수를 useCallback으로 메모이제이션\n  const speak = useCallback(async step => {\n    console.log(`speak 함수 호출: step ${step}`);\n    try {\n      const audioUrl = `http://localhost:8000${audioGuides[step]}`;\n      const audio = new Audio(audioUrl);\n      return new Promise(resolve => {\n        audio.onended = () => {\n          console.log(`speak 함수 완료: step ${step}`);\n          resolve();\n        };\n        audio.onerror = () => {\n          console.error('오디오 재생 중 오류');\n          resolve();\n        };\n        audio.play();\n      });\n    } catch (error) {\n      console.error('음성 안내 재생 중 오류:', error);\n    }\n  }, []); // 빈 의존성 배열\n\n  // STT 기능 - 답변 받기\n  const startListeningHandler = async field => {\n    if (isProcessing) return;\n    try {\n      setIsProcessing(true);\n      setIsListening(true);\n\n      // 모든 필드에 대해 동일한 녹음 로직 사용\n      const recordingTime = field === 'phone' ? 15000 : 8000; // 전화번호는 15초, 나머지는 8초\n      const silenceThreshold = field === 'phone' ? 8000 : 5000; // 전화번호는 8초, 나머지는 5초 침묵\n\n      return new Promise(async (resolve, reject) => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            audio: true\n          });\n          const mediaRecorder = new MediaRecorder(stream);\n          const audioChunks = [];\n          mediaRecorder.ondataavailable = event => {\n            audioChunks.push(event.data);\n          };\n          mediaRecorder.onstop = async () => {\n            try {\n              const audioBlob = new Blob(audioChunks, {\n                type: 'audio/webm'\n              });\n              let text = await voiceService.speechToText(audioBlob);\n              if (field === 'phone') {\n                // 전화번호의 경우에만 숫자 변환 수행\n                const numbers_only = text.replace(/[^0-9]/g, '');\n                if (numbers_only.length >= 10) {\n                  text = `${numbers_only.slice(0, 3)}-${numbers_only.slice(3, 7)}-${numbers_only.slice(7)}`;\n                } else {\n                  text = numbers_only;\n                }\n              } else if (field === 'address') {\n                // 주소 입력의 경우 주소 매칭\n                const matchResult = await voiceService.matchAddress(text);\n                if (matchResult.matched_address) {\n                  const addr = matchResult.matched_address;\n                  text = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-' + addr.building_sub_num : ''}`;\n                }\n              }\n              // 이름과 나이는 변환 없이 그대로 사용\n\n              setFormData(prev => ({\n                ...prev,\n                [field]: text\n              }));\n              resolve(text);\n            } catch (error) {\n              console.error('음성 인식 오류:', error);\n              reject(error);\n            } finally {\n              setIsListening(false);\n              setIsProcessing(false);\n            }\n          };\n          mediaRecorder.start();\n\n          // 녹음 중지 타이머\n          setTimeout(() => {\n            if (mediaRecorder.state === 'recording') {\n              mediaRecorder.stop();\n            }\n          }, recordingTime);\n\n          // 침묵 감지 로직\n          let lastAudioTime = Date.now();\n          const silenceCheck = setInterval(() => {\n            if (audioChunks.length > 0 && Date.now() - lastAudioTime > silenceThreshold) {\n              clearInterval(silenceCheck);\n              if (mediaRecorder.state === 'recording') {\n                mediaRecorder.stop();\n              }\n            }\n            if (audioChunks.length > 0) {\n              lastAudioTime = Date.now();\n            }\n          }, 1000);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      console.error('음성 입력 오류:', error);\n      setIsListening(false);\n      setIsProcessing(false);\n      throw error;\n    }\n  };\n\n  // handleConfirm 함수 수정\n  const handleConfirm = useCallback(step => {\n    if (!completedSteps.includes(step)) {\n      setCompletedSteps(prev => [...prev, step]);\n      setCurrentStep(step + 1);\n\n      // 다음 섹션으로 스크롤 - sectionsRef 활용\n      setTimeout(() => {\n        if (sectionsRef.current[step + 1]) {\n          sectionsRef.current[step + 1].scrollIntoView({\n            behavior: 'smooth',\n            block: 'start',\n            inline: 'nearest'\n          });\n        }\n      }, 100);\n\n      // 다음 단계의 음성 안내 재생\n      if (step + 1 <= 4) {\n        speak(step + 1);\n      }\n    }\n  }, [completedSteps, speak]);\n\n  // 질문 텍스트 가져오기\n  const getQuestionForStep = step => {\n    switch (step) {\n      case 1:\n        return \"이름이 어떻게 되세요?\";\n      case 2:\n        return \"나이가 어떻게 되세요?\";\n      case 3:\n        return \"전화번호가 어떻게 되세요?\";\n      case 4:\n        return \"어디 사세요?\";\n      default:\n        return \"\";\n    }\n  };\n\n  // 나이 선택을 위한 버튼 그룹 컴포넌트\n  const AgeButtonGroup = ({\n    value,\n    onChange,\n    disabled\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hmk-age-buttons\",\n    children: ['50대', '60대', '70대', '80대', '90대 이상'].map(age => /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: `hmk-age-button ${value === age ? 'selected' : ''}`,\n      onClick: () => onChange('age', age),\n      disabled: disabled,\n      children: age\n    }, age, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 9\n  }, this);\n\n  // 입력값 변경 핸들러를 메모이제이션\n  const handleInputChange = useCallback((field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n\n  // 컴포넌트 마운트 시 첫 번째 안내 음성 재생 (의존성 배열 수정)\n  useEffect(() => {\n    speak(1); // 첫 번째 질문 재생\n    return () => {\n      localStorage.removeItem('resumeFormData');\n    };\n  }, []); // 빈 의존성 배열로 변경\n\n  const handleVoiceInput = async field => {\n    try {\n      setIsProcessing(true);\n\n      // 1. 음성 녹음 시작\n      await startListeningHandler(field);\n      setIsProcessing(false);\n    } catch (error) {\n      console.error('음성 입력 중 오류:', error);\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hmk-sequence-container\",\n    onSubmit: e => e.preventDefault(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hmk-back-button\",\n        onClick: () => navigate(-1),\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faArrowLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hmk-progress-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hmk-progress-track\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hmk-progress-fill\",\n            style: {\n              width: `${completedSteps.length / 4 * 100}%`\n            } // 수정: 단계 수에 맞게 변경\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"hmk-progress-step\",\n          children: [completedSteps.length, \"/4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sections-container\",\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        step: 1,\n        question: \"\\uC774\\uB984\\uC774 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"name\",\n        value: formData.name,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(1),\n        currentStep: currentStep\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), completedSteps.includes(1) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 2,\n        question: \"\\uB098\\uC774\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"age\",\n        value: formData.age,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(2),\n        currentStep: currentStep\n      }, 2, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 21\n      }, this), completedSteps.includes(2) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 3,\n        question: \"\\uC804\\uD654\\uBC88\\uD638\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"phone\",\n        value: formData.phone,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(3),\n        currentStep: currentStep\n      }, 3, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }, this), completedSteps.includes(3) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 4,\n        question: \"\\uC5B4\\uB514 \\uC0AC\\uC138\\uC694?\",\n        field: \"address\",\n        value: formData.address,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(4),\n        currentStep: currentStep\n      }, 4, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), isAllCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hmk-submit-button\",\n        onClick: handleSubmit,\n        children: \"\\uC81C\\uCD9C\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 9\n  }, this);\n};\n_s2(ResumeSequence, \"1F/knWLXdcjqPmrNoVY9O6swXrE=\", false, function () {\n  return [useNavigate, useVoiceRecording];\n});\n_c3 = ResumeSequence;\nexport default ResumeSequence;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Section$memo\");\n$RefreshReg$(_c2, \"Section\");\n$RefreshReg$(_c3, \"ResumeSequence\");","map":{"version":3,"names":["React","useState","useEffect","useRef","memo","useCallback","useNavigate","FontAwesomeIcon","faMicrophone","faArrowLeft","faCheck","faArrowDown","voiceService","useVoiceRecording","axios","jsxDEV","_jsxDEV","audioGuides","Section","_s","_c","step","question","field","value","onChange","onConfirm","isCompleted","currentStep","sectionRef","handleChange","e","target","ref","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onClick","icon","trim","_c2","ResumeSequence","_s2","navigate","setCurrentStep","formData","setFormData","savedData","localStorage","getItem","JSON","parse","name","age","phone","address","isListening","setIsListening","completedSteps","setCompletedSteps","sectionsRef","isRecording","error","startRecording","checkSilence","isProcessing","setIsProcessing","timer","setTimeout","setItem","stringify","clearTimeout","isAllCompleted","length","handleSubmit","response","post","data","success","removeItem","console","speak","log","audioUrl","audio","Audio","Promise","resolve","onended","onerror","play","startListeningHandler","recordingTime","silenceThreshold","reject","stream","navigator","mediaDevices","getUserMedia","mediaRecorder","MediaRecorder","audioChunks","ondataavailable","event","push","onstop","audioBlob","Blob","text","speechToText","numbers_only","replace","slice","matchResult","matchAddress","matched_address","addr","city","district","town","road_name","building_main_num","building_sub_num","prev","start","state","stop","lastAudioTime","Date","now","silenceCheck","setInterval","clearInterval","handleConfirm","includes","current","scrollIntoView","behavior","block","inline","getQuestionForStep","AgeButtonGroup","disabled","map","handleInputChange","handleVoiceInput","onSubmit","preventDefault","style","width","_c3","$RefreshReg$"],"sources":["D:/dev/finalproj/react_finalproj/client/src/components/forms/ResumeSequence.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, memo, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMicrophone, faArrowLeft, faCheck, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport '../../assets/css/resumeSequence.css';\r\nimport { voiceService } from '../../api/voiceService';\r\nimport { useVoiceRecording } from '../../hooks/useVoiceRecording';\r\nimport axios from 'axios';\r\n\r\n// 미리 녹음된 안내 음성 파일 import\r\nconst audioGuides = {\r\n    1: '/static/audio/guides/name_question.mp3',    // \"이름이 어떻게 되세요?\"\r\n    2: '/static/audio/guides/age_question.mp3',     // \"나이가 어떻게 되세요?\"\r\n    3: '/static/audio/guides/phone_question.mp3',   // \"전화번호가 어떻게 되세요?\"\r\n    4: '/static/audio/guides/address_question.mp3'  // \"어디 사세요?\"\r\n};\r\n\r\n// Section 컴포넌트를 파일 최상단으로 분리\r\nconst Section = memo(({ step, question, field, value, onChange, onConfirm, isCompleted, currentStep }) => {\r\n    const sectionRef = useRef(null);\r\n\r\n    // 순수 함수로 핸들러 정의\r\n    const handleChange = (e) => {\r\n        onChange(field, e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div \r\n            ref={sectionRef}\r\n            className={`hmk-sequence-section ${isCompleted ? 'completed' : ''} ${currentStep === step ? 'active' : ''}`}\r\n        >\r\n            <div className=\"hmk-sequence-content\">\r\n                <h2 className=\"hmk-sequence-question\">{question}</h2>\r\n                <div className=\"hmk-input-container\">\r\n                    <input\r\n                        type={field === 'phone' ? 'tel' : 'text'}\r\n                        className=\"hmk-sequence-input\"\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        placeholder={field === 'phone' ? '전화번호를 입력해주세요' : \r\n                                   field === 'address' ? '주소를 입력해주세요' : '입력해주세요'}\r\n                    />\r\n                    <button \r\n                        className=\"hmk-voice-button\"\r\n                        onClick={() => onConfirm(step)}\r\n                    >\r\n                        <FontAwesomeIcon icon={faMicrophone} />\r\n                    </button>\r\n                </div>\r\n                {value && value.trim() && (\r\n                    <button \r\n                        className=\"hmk-confirm-button\"\r\n                        onClick={() => onConfirm(step)}\r\n                    >\r\n                        확인\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst ResumeSequence = () => {\r\n    const navigate = useNavigate();\r\n    const [currentStep, setCurrentStep] = useState(1);\r\n    const [formData, setFormData] = useState(() => {\r\n        // 로컬 스토리지에서 기존 데이터 불러오기\r\n        const savedData = localStorage.getItem('resumeFormData');\r\n        return savedData ? JSON.parse(savedData) : {\r\n            name: '',\r\n            age: '',\r\n            phone: '',\r\n            address: '',\r\n        };\r\n    });\r\n    const [isListening, setIsListening] = useState(false);\r\n    const [completedSteps, setCompletedSteps] = useState([]);\r\n    const sectionsRef = useRef([]);\r\n    const { isRecording, error, startRecording, checkSilence } = useVoiceRecording();\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n    // 폼 데이터가 변경될 때마다 로컬 스토리지에 저장\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            localStorage.setItem('resumeFormData', JSON.stringify(formData));\r\n        }, 500); // 디바운스 시간 설정\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [formData]);\r\n\r\n    // 모든 단계가 완료되었는지 확인\r\n    const isAllCompleted = completedSteps.length === 4;\r\n\r\n    // 폼 제출 처리\r\n    const handleSubmit = async () => {\r\n        try {\r\n            // 서버로 데이터 전송\r\n            const response = await axios.post('http://localhost:8000/api/voice/resume', formData);\r\n            if (response.data.success) {\r\n                // 성공 시 로컬 스토리지 클리어\r\n                localStorage.removeItem('resumeFormData');\r\n                // 다음 페이지로 이동\r\n                navigate('/success');\r\n            }\r\n        } catch (error) {\r\n            console.error('폼 제출 중 오류:', error);\r\n        }\r\n    };\r\n\r\n    // speak 함수를 useCallback으로 메모이제이션\r\n    const speak = useCallback(async (step) => {\r\n        console.log(`speak 함수 호출: step ${step}`);\r\n        try {\r\n            const audioUrl = `http://localhost:8000${audioGuides[step]}`;\r\n            const audio = new Audio(audioUrl);\r\n            \r\n            return new Promise((resolve) => {\r\n                audio.onended = () => {\r\n                    console.log(`speak 함수 완료: step ${step}`);\r\n                    resolve();\r\n                };\r\n                audio.onerror = () => {\r\n                    console.error('오디오 재생 중 오류');\r\n                    resolve();\r\n                };\r\n                audio.play();\r\n            });\r\n        } catch (error) {\r\n            console.error('음성 안내 재생 중 오류:', error);\r\n        }\r\n    }, []); // 빈 의존성 배열\r\n\r\n    // STT 기능 - 답변 받기\r\n    const startListeningHandler = async (field) => {\r\n        if (isProcessing) return;\r\n        \r\n        try {\r\n            setIsProcessing(true);\r\n            setIsListening(true);\r\n\r\n            // 모든 필드에 대해 동일한 녹음 로직 사용\r\n            const recordingTime = field === 'phone' ? 15000 : 8000;  // 전화번호는 15초, 나머지는 8초\r\n            const silenceThreshold = field === 'phone' ? 8000 : 5000;  // 전화번호는 8초, 나머지는 5초 침묵\r\n\r\n            return new Promise(async (resolve, reject) => {\r\n                try {\r\n                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n                    const mediaRecorder = new MediaRecorder(stream);\r\n                    const audioChunks = [];\r\n\r\n                    mediaRecorder.ondataavailable = (event) => {\r\n                        audioChunks.push(event.data);\r\n                    };\r\n\r\n                    mediaRecorder.onstop = async () => {\r\n                        try {\r\n                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\r\n                            let text = await voiceService.speechToText(audioBlob);\r\n                            \r\n                            if (field === 'phone') {\r\n                                // 전화번호의 경우에만 숫자 변환 수행\r\n                                const numbers_only = text.replace(/[^0-9]/g, '');\r\n                                if (numbers_only.length >= 10) {\r\n                                    text = `${numbers_only.slice(0,3)}-${numbers_only.slice(3,7)}-${numbers_only.slice(7)}`;\r\n                                } else {\r\n                                    text = numbers_only;\r\n                                }\r\n                            } else if (field === 'address') {\r\n                                // 주소 입력의 경우 주소 매칭\r\n                                const matchResult = await voiceService.matchAddress(text);\r\n                                if (matchResult.matched_address) {\r\n                                    const addr = matchResult.matched_address;\r\n                                    text = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-'+addr.building_sub_num : ''}`;\r\n                                }\r\n                            }\r\n                            // 이름과 나이는 변환 없이 그대로 사용\r\n\r\n                            setFormData(prev => ({...prev, [field]: text}));\r\n                            resolve(text);\r\n                        } catch (error) {\r\n                            console.error('음성 인식 오류:', error);\r\n                            reject(error);\r\n                        } finally {\r\n                            setIsListening(false);\r\n                            setIsProcessing(false);\r\n                        }\r\n                    };\r\n\r\n                    mediaRecorder.start();\r\n\r\n                    // 녹음 중지 타이머\r\n                    setTimeout(() => {\r\n                        if (mediaRecorder.state === 'recording') {\r\n                            mediaRecorder.stop();\r\n                        }\r\n                    }, recordingTime);\r\n\r\n                    // 침묵 감지 로직\r\n                    let lastAudioTime = Date.now();\r\n                    const silenceCheck = setInterval(() => {\r\n                        if (audioChunks.length > 0 && Date.now() - lastAudioTime > silenceThreshold) {\r\n                            clearInterval(silenceCheck);\r\n                            if (mediaRecorder.state === 'recording') {\r\n                                mediaRecorder.stop();\r\n                            }\r\n                        }\r\n                        if (audioChunks.length > 0) {\r\n                            lastAudioTime = Date.now();\r\n                        }\r\n                    }, 1000);\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('음성 입력 오류:', error);\r\n            setIsListening(false);\r\n            setIsProcessing(false);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // handleConfirm 함수 수정\r\n    const handleConfirm = useCallback((step) => {\r\n        if (!completedSteps.includes(step)) {\r\n            setCompletedSteps(prev => [...prev, step]);\r\n            setCurrentStep(step + 1);\r\n            \r\n            // 다음 섹션으로 스크롤 - sectionsRef 활용\r\n            setTimeout(() => {\r\n                if (sectionsRef.current[step + 1]) {\r\n                    sectionsRef.current[step + 1].scrollIntoView({\r\n                        behavior: 'smooth',\r\n                        block: 'start',\r\n                        inline: 'nearest'\r\n                    });\r\n                }\r\n            }, 100);\r\n\r\n            // 다음 단계의 음성 안내 재생\r\n            if (step + 1 <= 4) {\r\n                speak(step + 1);\r\n            }\r\n        }\r\n    }, [completedSteps, speak]);\r\n\r\n    // 질문 텍스트 가져오기\r\n    const getQuestionForStep = (step) => {\r\n        switch (step) {\r\n            case 1:\r\n                return \"이름이 어떻게 되세요?\";\r\n            case 2:\r\n                return \"나이가 어떻게 되세요?\";\r\n            case 3:\r\n                return \"전화번호가 어떻게 되세요?\";\r\n            case 4:\r\n                return \"어디 사세요?\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    };\r\n\r\n    // 나이 선택을 위한 버튼 그룹 컴포넌트\r\n    const AgeButtonGroup = ({ value, onChange, disabled }) => (\r\n        <div className=\"hmk-age-buttons\">\r\n            {['50대', '60대', '70대', '80대', '90대 이상'].map((age) => (\r\n                <button\r\n                    key={age}\r\n                    type=\"button\"\r\n                    className={`hmk-age-button ${value === age ? 'selected' : ''}`}\r\n                    onClick={() => onChange('age', age)}\r\n                    disabled={disabled}\r\n                >\r\n                    {age}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    // 입력값 변경 핸들러를 메모이제이션\r\n    const handleInputChange = useCallback((field, value) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [field]: value\r\n        }));\r\n    }, []);\r\n\r\n    // 컴포넌트 마운트 시 첫 번째 안내 음성 재생 (의존성 배열 수정)\r\n    useEffect(() => {\r\n        speak(1);  // 첫 번째 질문 재생\r\n        return () => {\r\n            localStorage.removeItem('resumeFormData');\r\n        };\r\n    }, []); // 빈 의존성 배열로 변경\r\n\r\n    const handleVoiceInput = async (field) => {\r\n        try {\r\n            setIsProcessing(true);\r\n            \r\n            // 1. 음성 녹음 시작\r\n            await startListeningHandler(field);\r\n            \r\n            setIsProcessing(false);\r\n        } catch (error) {\r\n            console.error('음성 입력 중 오류:', error);\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div \r\n            className=\"hmk-sequence-container\"\r\n            onSubmit={e => e.preventDefault()}\r\n        >\r\n            <div className=\"hmk-sequence-header\">\r\n                <button \r\n                    className=\"hmk-back-button\"\r\n                    onClick={() => navigate(-1)}\r\n                >\r\n                    <FontAwesomeIcon icon={faArrowLeft} />\r\n                </button>\r\n                <div className=\"hmk-progress-bar\">\r\n                    <div className=\"hmk-progress-track\">\r\n                        <div \r\n                            className=\"hmk-progress-fill\"\r\n                            style={{ width: `${(completedSteps.length / 4) * 100}%` }} // 수정: 단계 수에 맞게 변경\r\n                        ></div>\r\n                    </div>\r\n                    <span className=\"hmk-progress-step\">{completedSteps.length}/4</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"hmk-sections-container\">\r\n                <Section \r\n                    key={1}\r\n                    step={1}\r\n                    question=\"이름이 어떻게 되세요?\"\r\n                    field=\"name\"\r\n                    value={formData.name}\r\n                    onChange={handleInputChange}\r\n                    onConfirm={handleConfirm}\r\n                    isCompleted={completedSteps.includes(1)}\r\n                    currentStep={currentStep}\r\n                />\r\n                {completedSteps.includes(1) && (\r\n                    <Section \r\n                        key={2}\r\n                        step={2}\r\n                        question=\"나이가 어떻게 되세요?\"\r\n                        field=\"age\"\r\n                        value={formData.age}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(2)}\r\n                        currentStep={currentStep}\r\n                    />\r\n                )}\r\n                {completedSteps.includes(2) && (\r\n                    <Section \r\n                        key={3}\r\n                        step={3}\r\n                        question=\"전화번호가 어떻게 되세요?\"\r\n                        field=\"phone\"\r\n                        value={formData.phone}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(3)}\r\n                        currentStep={currentStep}\r\n                    />\r\n                )}\r\n                {completedSteps.includes(3) && (\r\n                    <Section \r\n                        key={4}\r\n                        step={4}\r\n                        question=\"어디 사세요?\"\r\n                        field=\"address\"\r\n                        value={formData.address}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(4)}\r\n                        currentStep={currentStep}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            {/* 모든 단계가 완료되면 제출 버튼 표시 */}\r\n            {isAllCompleted && (\r\n                <div className=\"hmk-sequence-footer\">\r\n                    <button \r\n                        className=\"hmk-submit-button\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        제출하기\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResumeSequence;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}