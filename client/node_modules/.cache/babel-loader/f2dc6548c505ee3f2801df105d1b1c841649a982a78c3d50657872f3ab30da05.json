{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\finalproj\\\\react_finalproj\\\\client\\\\src\\\\components\\\\forms\\\\ResumeSequence.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, memo, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faArrowLeft, faCheck, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport '../../assets/css/resumeSequence.css';\nimport { voiceService } from '../../api/voiceService';\nimport { useVoiceRecording } from '../../hooks/useVoiceRecording';\nimport axios from 'axios';\n\n// 미리 녹음된 안내 음성 파일 import\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst audioGuides = {\n  1: '/static/audio/guides/name_question.mp3',\n  // \"이름이 어떻게 되세요?\"\n  2: '/static/audio/guides/age_question.mp3',\n  // \"나이가 어떻게 되세요?\"\n  3: '/static/audio/guides/phone_question.mp3',\n  // \"전화번호가 어떻게 되세요?\"\n  4: '/static/audio/guides/address_question.mp3' // \"어디 사세요?\"\n};\n\n// AgeButtonGroup 컴포넌트 수정\nconst AgeButtonGroup = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  value,\n  onChange,\n  isCompleted,\n  onConfirm,\n  step\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const handleAgeSelect = age => {\n    onChange('age', age); // 나이만 선택하고 다음 단계로는 넘어가지 않음\n  };\n  const handleClick = () => {\n    if (isCompleted) {\n      setIsEditing(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hmk-age-buttons\",\n    onClick: handleClick,\n    children: [['50대', '60대', '70대', '80대', '90대 이상'].map(age => /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: `hmk-age-button ${value === age ? 'selected' : ''} ${isCompleted && !isEditing ? 'completed' : ''}`,\n      onClick: () => handleAgeSelect(age),\n      children: age\n    }, age, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this)), value &&\n    /*#__PURE__*/\n    // 나이가 선택되었을 때만 확인 버튼 표시\n    _jsxDEV(\"button\", {\n      className: \"hmk-confirm-button\",\n      onClick: () => onConfirm(step),\n      children: \"\\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}, \"N4qUVpaen/rROL8jPu/4huFD8lA=\")), \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n// Section 컴포넌트를 파일 최상단으로 분리\n_c2 = AgeButtonGroup;\nconst Section = /*#__PURE__*/_s2(/*#__PURE__*/memo(_c3 = _s2(({\n  step,\n  question,\n  field,\n  value,\n  onChange,\n  onConfirm,\n  isCompleted,\n  currentStep,\n  sectionsRef\n}) => {\n  _s2();\n  const sectionRef = useRef(null);\n  const [isEditing, setIsEditing] = useState(false); // 편집 모드 상태 추가\n  const [editValue, setEditValue] = useState(value); // 편집 중인 값 상태 추가\n\n  // sectionsRef에 현재 섹션의 ref 등록\n  useEffect(() => {\n    sectionsRef.current[step] = sectionRef.current;\n  }, [step, sectionsRef]);\n  useEffect(() => {\n    setEditValue(value);\n  }, [value]);\n\n  // 입력 핸들러\n  const handleChange = e => {\n    const newValue = e.target.value;\n    setEditValue(newValue);\n    onChange(field, newValue);\n  };\n\n  // 입력 필드 클릭 핸들러\n  const handleInputClick = () => {\n    if (isCompleted) {\n      setIsEditing(true);\n      setEditValue(''); // 기존 값 초기화\n    }\n  };\n\n  // 편집 완료 핸들러\n  const handleEditComplete = () => {\n    if (editValue.trim()) {\n      setIsEditing(false);\n      onConfirm(step);\n    }\n  };\n\n  // 입력값 초기화 핸들러\n  const handleClear = e => {\n    e.stopPropagation(); // 이벤트 버블링 방지\n    onChange(field, '');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: sectionRef,\n    className: `hmk-sequence-section ${isCompleted ? 'completed' : ''} ${currentStep === step ? 'active' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"hmk-sequence-question\",\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), field === 'age' ? /*#__PURE__*/_jsxDEV(AgeButtonGroup, {\n        value: value,\n        onChange: onChange,\n        isCompleted: isCompleted,\n        onConfirm: onConfirm,\n        step: step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hmk-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hmk-input-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: field === 'phone' ? 'tel' : 'text',\n              className: `hmk-sequence-input ${isCompleted && !isEditing ? 'completed' : ''}`,\n              value: isEditing ? editValue : value,\n              onChange: handleChange,\n              onClick: handleInputClick,\n              placeholder: field === 'phone' ? '전화번호를 입력해주세요' : field === 'address' ? '주소를 입력해주세요' : '입력해주세요'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this), value && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"hmk-clear-button\",\n              onClick: handleClear,\n              type: \"button\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"hmk-voice-button\",\n            onClick: () => onConfirm(step),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faMicrophone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), (isEditing && editValue.trim() || !isCompleted && value.trim()) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hmk-confirm-button\",\n          onClick: isEditing ? handleEditComplete : () => onConfirm(step),\n          children: isEditing ? '수정 완료' : '확인'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}, \"6m3Oag2i3f8iVFhSA5dm5q7iC7U=\")), \"6m3Oag2i3f8iVFhSA5dm5q7iC7U=\");\n_c4 = Section;\nconst ResumeSequence = () => {\n  _s3();\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState(() => {\n    // 로컬 스토리지에서 기존 데이터 불러오기\n    const savedData = localStorage.getItem('resumeFormData');\n    return savedData ? JSON.parse(savedData) : {\n      name: '',\n      age: '',\n      phone: '',\n      address: ''\n    };\n  });\n  const [isListening, setIsListening] = useState(false);\n  const [completedSteps, setCompletedSteps] = useState([]);\n  const sectionsRef = useRef([]);\n  const {\n    isRecording,\n    error,\n    startRecording,\n    checkSilence\n  } = useVoiceRecording();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 폼 데이터가 변경될 때마다 로컬 스토리지에 저장\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      localStorage.setItem('resumeFormData', JSON.stringify(formData));\n    }, 500); // 디바운스 시간 설정\n\n    return () => clearTimeout(timer);\n  }, [formData]);\n\n  // 모든 단계가 완료되었는지 확인\n  const isAllCompleted = completedSteps.length === 4;\n\n  // 폼 제출 처리\n  const handleSubmit = async () => {\n    try {\n      // 서버로 데이터 전송\n      const response = await axios.post('http://localhost:8000/api/voice/resume', formData);\n      if (response.data.success) {\n        // 성공 시 로컬 스토리지 클리어\n        localStorage.removeItem('resumeFormData');\n        // 다음 페이지로 이동\n        navigate('/success');\n      }\n    } catch (error) {\n      console.error('폼 제출 중 오류:', error);\n    }\n  };\n\n  // speak 함수를 useCallback으로 메모이제이션\n  const speak = useCallback(async step => {\n    console.log(`speak 함수 호출: step ${step}`);\n    try {\n      const audioUrl = `http://localhost:8000${audioGuides[step]}`;\n      const audio = new Audio(audioUrl);\n      return new Promise(resolve => {\n        audio.onended = () => {\n          console.log(`speak 함수 완료: step ${step}`);\n          resolve();\n        };\n        audio.onerror = () => {\n          console.error('오디오 재생 중 오류');\n          resolve();\n        };\n        audio.play();\n      });\n    } catch (error) {\n      console.error('음성 안내 재생 중 오류:', error);\n    }\n  }, []); // 빈 의존성 배열\n\n  // STT 기능 - 답변 받기\n  const startListeningHandler = async field => {\n    if (isProcessing) return;\n    try {\n      setIsProcessing(true);\n      setIsListening(true);\n\n      // 모든 필드에 대해 동일한 녹음 로직 사용\n      const recordingTime = field === 'phone' ? 15000 : 8000; // 전화번호는 15초, 나머지는 8초\n      const silenceThreshold = field === 'phone' ? 8000 : 5000; // 전화번호는 8초, 나머지는 5초 침묵\n\n      return new Promise(async (resolve, reject) => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            audio: true\n          });\n          const mediaRecorder = new MediaRecorder(stream);\n          const audioChunks = [];\n          mediaRecorder.ondataavailable = event => {\n            audioChunks.push(event.data);\n          };\n          mediaRecorder.onstop = async () => {\n            try {\n              const audioBlob = new Blob(audioChunks, {\n                type: 'audio/webm'\n              });\n              let text = await voiceService.speechToText(audioBlob);\n              if (field === 'phone') {\n                // 전화번호의 경우에만 숫자 변환 수행\n                const numbers_only = text.replace(/[^0-9]/g, '');\n                if (numbers_only.length >= 10) {\n                  text = `${numbers_only.slice(0, 3)}-${numbers_only.slice(3, 7)}-${numbers_only.slice(7)}`;\n                } else {\n                  text = numbers_only;\n                }\n              } else if (field === 'address') {\n                // 주소 입력의 경우 주소 매칭\n                const matchResult = await voiceService.matchAddress(text);\n                if (matchResult.matched_address) {\n                  const addr = matchResult.matched_address;\n                  text = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-' + addr.building_sub_num : ''}`;\n                }\n              }\n              // 이름과 나이는 변환 없이 그대로 사용\n\n              setFormData(prev => ({\n                ...prev,\n                [field]: text\n              }));\n              resolve(text);\n            } catch (error) {\n              console.error('음성 인식 오류:', error);\n              reject(error);\n            } finally {\n              setIsListening(false);\n              setIsProcessing(false);\n            }\n          };\n          mediaRecorder.start();\n\n          // 녹음 중지 타이머\n          setTimeout(() => {\n            if (mediaRecorder.state === 'recording') {\n              mediaRecorder.stop();\n            }\n          }, recordingTime);\n\n          // 침묵 감지 로직\n          let lastAudioTime = Date.now();\n          const silenceCheck = setInterval(() => {\n            if (audioChunks.length > 0 && Date.now() - lastAudioTime > silenceThreshold) {\n              clearInterval(silenceCheck);\n              if (mediaRecorder.state === 'recording') {\n                mediaRecorder.stop();\n              }\n            }\n            if (audioChunks.length > 0) {\n              lastAudioTime = Date.now();\n            }\n          }, 1000);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      console.error('음성 입력 오류:', error);\n      setIsListening(false);\n      setIsProcessing(false);\n      throw error;\n    }\n  };\n\n  // handleConfirm 함수 수정\n  const handleConfirm = useCallback(step => {\n    if (!completedSteps.includes(step)) {\n      setCompletedSteps(prev => [...prev, step]);\n      setCurrentStep(step + 1);\n\n      // 다음 섹션으로 스크롤\n      setTimeout(() => {\n        if (sectionsRef.current[step + 1]) {\n          sectionsRef.current[step + 1].scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n          });\n        }\n      }, 100);\n      if (step + 1 <= 4) {\n        speak(step + 1);\n      }\n    }\n  }, [completedSteps, speak]);\n\n  // 질문 텍스트 가져오기\n  const getQuestionForStep = step => {\n    switch (step) {\n      case 1:\n        return \"이름이 어떻게 되세요?\";\n      case 2:\n        return \"나이가 어떻게 되세요?\";\n      case 3:\n        return \"전화번호가 어떻게 되세요?\";\n      case 4:\n        return \"어디 사세요?\";\n      default:\n        return \"\";\n    }\n  };\n\n  // 입력값 변경 핸들러를 메모이제이션\n  const handleInputChange = useCallback((field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n\n  // 컴포넌트 마운트 시 첫 번째 안내 음성 재생 (의존성 배열 수정)\n  useEffect(() => {\n    speak(1); // 첫 번째 질문 재생\n    return () => {\n      localStorage.removeItem('resumeFormData');\n    };\n  }, []); // 빈 의존성 배열로 변경\n\n  const handleVoiceInput = async field => {\n    try {\n      setIsProcessing(true);\n\n      // 1. 음성 녹음 시작\n      await startListeningHandler(field);\n      setIsProcessing(false);\n    } catch (error) {\n      console.error('음성 입력 중 오류:', error);\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hmk-sequence-container\",\n    onSubmit: e => e.preventDefault(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hmk-back-button\",\n        onClick: () => navigate(-1),\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faArrowLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hmk-progress-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hmk-progress-track\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hmk-progress-fill\",\n            style: {\n              width: `${completedSteps.length / 4 * 100}%`\n            } // 수정: 단계 수에 맞게 변경\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"hmk-progress-step\",\n          children: [completedSteps.length, \"/4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sections-container\",\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        step: 1,\n        question: \"\\uC774\\uB984\\uC774 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"name\",\n        value: formData.name,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(1),\n        currentStep: currentStep,\n        sectionsRef: sectionsRef\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), completedSteps.includes(1) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 2,\n        question: \"\\uB098\\uC774\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"age\",\n        value: formData.age,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(2),\n        currentStep: currentStep,\n        sectionsRef: sectionsRef\n      }, 2, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 21\n      }, this), completedSteps.includes(2) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 3,\n        question: \"\\uC804\\uD654\\uBC88\\uD638\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uB418\\uC138\\uC694?\",\n        field: \"phone\",\n        value: formData.phone,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(3),\n        currentStep: currentStep,\n        sectionsRef: sectionsRef\n      }, 3, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 21\n      }, this), completedSteps.includes(3) && /*#__PURE__*/_jsxDEV(Section, {\n        step: 4,\n        question: \"\\uC5B4\\uB514 \\uC0AC\\uC138\\uC694?\",\n        field: \"address\",\n        value: formData.address,\n        onChange: handleInputChange,\n        onConfirm: handleConfirm,\n        isCompleted: completedSteps.includes(4),\n        currentStep: currentStep,\n        sectionsRef: sectionsRef\n      }, 4, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }, this), isAllCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hmk-sequence-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hmk-submit-button\",\n        onClick: handleSubmit,\n        children: \"\\uC81C\\uCD9C\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 9\n  }, this);\n};\n_s3(ResumeSequence, \"1F/knWLXdcjqPmrNoVY9O6swXrE=\", false, function () {\n  return [useNavigate, useVoiceRecording];\n});\n_c5 = ResumeSequence;\nexport default ResumeSequence;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"AgeButtonGroup$memo\");\n$RefreshReg$(_c2, \"AgeButtonGroup\");\n$RefreshReg$(_c3, \"Section$memo\");\n$RefreshReg$(_c4, \"Section\");\n$RefreshReg$(_c5, \"ResumeSequence\");","map":{"version":3,"names":["React","useState","useEffect","useRef","memo","useCallback","useNavigate","FontAwesomeIcon","faMicrophone","faArrowLeft","faCheck","faArrowDown","voiceService","useVoiceRecording","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","audioGuides","AgeButtonGroup","_s","_c","value","onChange","isCompleted","onConfirm","step","isEditing","setIsEditing","handleAgeSelect","age","handleClick","className","onClick","children","map","type","fileName","_jsxFileName","lineNumber","columnNumber","_c2","Section","_s2","_c3","question","field","currentStep","sectionsRef","sectionRef","editValue","setEditValue","current","handleChange","e","newValue","target","handleInputClick","handleEditComplete","trim","handleClear","stopPropagation","ref","placeholder","icon","_c4","ResumeSequence","_s3","navigate","setCurrentStep","formData","setFormData","savedData","localStorage","getItem","JSON","parse","name","phone","address","isListening","setIsListening","completedSteps","setCompletedSteps","isRecording","error","startRecording","checkSilence","isProcessing","setIsProcessing","timer","setTimeout","setItem","stringify","clearTimeout","isAllCompleted","length","handleSubmit","response","post","data","success","removeItem","console","speak","log","audioUrl","audio","Audio","Promise","resolve","onended","onerror","play","startListeningHandler","recordingTime","silenceThreshold","reject","stream","navigator","mediaDevices","getUserMedia","mediaRecorder","MediaRecorder","audioChunks","ondataavailable","event","push","onstop","audioBlob","Blob","text","speechToText","numbers_only","replace","slice","matchResult","matchAddress","matched_address","addr","city","district","town","road_name","building_main_num","building_sub_num","prev","start","state","stop","lastAudioTime","Date","now","silenceCheck","setInterval","clearInterval","handleConfirm","includes","scrollIntoView","behavior","block","getQuestionForStep","handleInputChange","handleVoiceInput","onSubmit","preventDefault","style","width","_c5","$RefreshReg$"],"sources":["D:/dev/finalproj/react_finalproj/client/src/components/forms/ResumeSequence.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, memo, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMicrophone, faArrowLeft, faCheck, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport '../../assets/css/resumeSequence.css';\r\nimport { voiceService } from '../../api/voiceService';\r\nimport { useVoiceRecording } from '../../hooks/useVoiceRecording';\r\nimport axios from 'axios';\r\n\r\n// 미리 녹음된 안내 음성 파일 import\r\nconst audioGuides = {\r\n    1: '/static/audio/guides/name_question.mp3',    // \"이름이 어떻게 되세요?\"\r\n    2: '/static/audio/guides/age_question.mp3',     // \"나이가 어떻게 되세요?\"\r\n    3: '/static/audio/guides/phone_question.mp3',   // \"전화번호가 어떻게 되세요?\"\r\n    4: '/static/audio/guides/address_question.mp3'  // \"어디 사세요?\"\r\n};\r\n\r\n// AgeButtonGroup 컴포넌트 수정\r\nconst AgeButtonGroup = memo(({ value, onChange, isCompleted, onConfirm, step }) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const handleAgeSelect = (age) => {\r\n        onChange('age', age);  // 나이만 선택하고 다음 단계로는 넘어가지 않음\r\n    };\r\n\r\n    const handleClick = () => {\r\n        if (isCompleted) {\r\n            setIsEditing(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"hmk-age-buttons\" onClick={handleClick}>\r\n            {['50대', '60대', '70대', '80대', '90대 이상'].map((age) => (\r\n                <button\r\n                    key={age}\r\n                    type=\"button\"\r\n                    className={`hmk-age-button ${value === age ? 'selected' : ''} ${isCompleted && !isEditing ? 'completed' : ''}`}\r\n                    onClick={() => handleAgeSelect(age)}\r\n                >\r\n                    {age}\r\n                </button>\r\n            ))}\r\n            {value && (  // 나이가 선택되었을 때만 확인 버튼 표시\r\n                <button \r\n                    className=\"hmk-confirm-button\"\r\n                    onClick={() => onConfirm(step)}\r\n                >\r\n                    확인\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\n// Section 컴포넌트를 파일 최상단으로 분리\r\nconst Section = memo(({ step, question, field, value, onChange, onConfirm, isCompleted, currentStep, sectionsRef }) => {\r\n    const sectionRef = useRef(null);\r\n    const [isEditing, setIsEditing] = useState(false);  // 편집 모드 상태 추가\r\n    const [editValue, setEditValue] = useState(value);  // 편집 중인 값 상태 추가\r\n\r\n    // sectionsRef에 현재 섹션의 ref 등록\r\n    useEffect(() => {\r\n        sectionsRef.current[step] = sectionRef.current;\r\n    }, [step, sectionsRef]);\r\n\r\n    useEffect(() => {\r\n        setEditValue(value);\r\n    }, [value]);\r\n\r\n    // 입력 핸들러\r\n    const handleChange = (e) => {\r\n        const newValue = e.target.value;\r\n        setEditValue(newValue);\r\n        onChange(field, newValue);\r\n    };\r\n\r\n    // 입력 필드 클릭 핸들러\r\n    const handleInputClick = () => {\r\n        if (isCompleted) {\r\n            setIsEditing(true);\r\n            setEditValue('');  // 기존 값 초기화\r\n        }\r\n    };\r\n\r\n    // 편집 완료 핸들러\r\n    const handleEditComplete = () => {\r\n        if (editValue.trim()) {\r\n            setIsEditing(false);\r\n            onConfirm(step);\r\n        }\r\n    };\r\n\r\n    // 입력값 초기화 핸들러\r\n    const handleClear = (e) => {\r\n        e.stopPropagation();  // 이벤트 버블링 방지\r\n        onChange(field, '');\r\n    };\r\n\r\n    return (\r\n        <div \r\n            ref={sectionRef}\r\n            className={`hmk-sequence-section ${isCompleted ? 'completed' : ''} ${currentStep === step ? 'active' : ''}`}\r\n        >\r\n            <div className=\"hmk-sequence-content\">\r\n                <h2 className=\"hmk-sequence-question\">{question}</h2>\r\n                {field === 'age' ? (\r\n                    <AgeButtonGroup\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        isCompleted={isCompleted}\r\n                        onConfirm={onConfirm}\r\n                        step={step}\r\n                    />\r\n                ) : (\r\n                    <>\r\n                        <div className=\"hmk-input-container\">\r\n                            <div className=\"hmk-input-wrapper\">\r\n                                <input\r\n                                    type={field === 'phone' ? 'tel' : 'text'}\r\n                                    className={`hmk-sequence-input ${isCompleted && !isEditing ? 'completed' : ''}`}\r\n                                    value={isEditing ? editValue : value}\r\n                                    onChange={handleChange}\r\n                                    onClick={handleInputClick}\r\n                                    placeholder={field === 'phone' ? '전화번호를 입력해주세요' : \r\n                                               field === 'address' ? '주소를 입력해주세요' : '입력해주세요'}\r\n                                />\r\n                                {value && (\r\n                                    <button \r\n                                        className=\"hmk-clear-button\"\r\n                                        onClick={handleClear}\r\n                                        type=\"button\"\r\n                                    >\r\n                                        ×\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                            <button \r\n                                className=\"hmk-voice-button\"\r\n                                onClick={() => onConfirm(step)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faMicrophone} />\r\n                            </button>\r\n                        </div>\r\n                        {((isEditing && editValue.trim()) || (!isCompleted && value.trim())) && (\r\n                            <button \r\n                                className=\"hmk-confirm-button\"\r\n                                onClick={isEditing ? handleEditComplete : () => onConfirm(step)}\r\n                            >\r\n                                {isEditing ? '수정 완료' : '확인'}\r\n                            </button>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst ResumeSequence = () => {\r\n    const navigate = useNavigate();\r\n    const [currentStep, setCurrentStep] = useState(1);\r\n    const [formData, setFormData] = useState(() => {\r\n        // 로컬 스토리지에서 기존 데이터 불러오기\r\n        const savedData = localStorage.getItem('resumeFormData');\r\n        return savedData ? JSON.parse(savedData) : {\r\n            name: '',\r\n            age: '',\r\n            phone: '',\r\n            address: '',\r\n        };\r\n    });\r\n    const [isListening, setIsListening] = useState(false);\r\n    const [completedSteps, setCompletedSteps] = useState([]);\r\n    const sectionsRef = useRef([]);\r\n    const { isRecording, error, startRecording, checkSilence } = useVoiceRecording();\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n    // 폼 데이터가 변경될 때마다 로컬 스토리지에 저장\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            localStorage.setItem('resumeFormData', JSON.stringify(formData));\r\n        }, 500); // 디바운스 시간 설정\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [formData]);\r\n\r\n    // 모든 단계가 완료되었는지 확인\r\n    const isAllCompleted = completedSteps.length === 4;\r\n\r\n    // 폼 제출 처리\r\n    const handleSubmit = async () => {\r\n        try {\r\n            // 서버로 데이터 전송\r\n            const response = await axios.post('http://localhost:8000/api/voice/resume', formData);\r\n            if (response.data.success) {\r\n                // 성공 시 로컬 스토리지 클리어\r\n                localStorage.removeItem('resumeFormData');\r\n                // 다음 페이지로 이동\r\n                navigate('/success');\r\n            }\r\n        } catch (error) {\r\n            console.error('폼 제출 중 오류:', error);\r\n        }\r\n    };\r\n\r\n    // speak 함수를 useCallback으로 메모이제이션\r\n    const speak = useCallback(async (step) => {\r\n        console.log(`speak 함수 호출: step ${step}`);\r\n        try {\r\n            const audioUrl = `http://localhost:8000${audioGuides[step]}`;\r\n            const audio = new Audio(audioUrl);\r\n            \r\n            return new Promise((resolve) => {\r\n                audio.onended = () => {\r\n                    console.log(`speak 함수 완료: step ${step}`);\r\n                    resolve();\r\n                };\r\n                audio.onerror = () => {\r\n                    console.error('오디오 재생 중 오류');\r\n                    resolve();\r\n                };\r\n                audio.play();\r\n            });\r\n        } catch (error) {\r\n            console.error('음성 안내 재생 중 오류:', error);\r\n        }\r\n    }, []); // 빈 의존성 배열\r\n\r\n    // STT 기능 - 답변 받기\r\n    const startListeningHandler = async (field) => {\r\n        if (isProcessing) return;\r\n        \r\n        try {\r\n            setIsProcessing(true);\r\n            setIsListening(true);\r\n\r\n            // 모든 필드에 대해 동일한 녹음 로직 사용\r\n            const recordingTime = field === 'phone' ? 15000 : 8000;  // 전화번호는 15초, 나머지는 8초\r\n            const silenceThreshold = field === 'phone' ? 8000 : 5000;  // 전화번호는 8초, 나머지는 5초 침묵\r\n\r\n            return new Promise(async (resolve, reject) => {\r\n                try {\r\n                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n                    const mediaRecorder = new MediaRecorder(stream);\r\n                    const audioChunks = [];\r\n\r\n                    mediaRecorder.ondataavailable = (event) => {\r\n                        audioChunks.push(event.data);\r\n                    };\r\n\r\n                    mediaRecorder.onstop = async () => {\r\n                        try {\r\n                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\r\n                            let text = await voiceService.speechToText(audioBlob);\r\n                            \r\n                            if (field === 'phone') {\r\n                                // 전화번호의 경우에만 숫자 변환 수행\r\n                                const numbers_only = text.replace(/[^0-9]/g, '');\r\n                                if (numbers_only.length >= 10) {\r\n                                    text = `${numbers_only.slice(0,3)}-${numbers_only.slice(3,7)}-${numbers_only.slice(7)}`;\r\n                                } else {\r\n                                    text = numbers_only;\r\n                                }\r\n                            } else if (field === 'address') {\r\n                                // 주소 입력의 경우 주소 매칭\r\n                                const matchResult = await voiceService.matchAddress(text);\r\n                                if (matchResult.matched_address) {\r\n                                    const addr = matchResult.matched_address;\r\n                                    text = `${addr.city} ${addr.district} ${addr.town} ${addr.road_name} ${addr.building_main_num}${addr.building_sub_num ? '-'+addr.building_sub_num : ''}`;\r\n                                }\r\n                            }\r\n                            // 이름과 나이는 변환 없이 그대로 사용\r\n\r\n                            setFormData(prev => ({...prev, [field]: text}));\r\n                            resolve(text);\r\n                        } catch (error) {\r\n                            console.error('음성 인식 오류:', error);\r\n                            reject(error);\r\n                        } finally {\r\n                            setIsListening(false);\r\n                            setIsProcessing(false);\r\n                        }\r\n                    };\r\n\r\n                    mediaRecorder.start();\r\n\r\n                    // 녹음 중지 타이머\r\n                    setTimeout(() => {\r\n                        if (mediaRecorder.state === 'recording') {\r\n                            mediaRecorder.stop();\r\n                        }\r\n                    }, recordingTime);\r\n\r\n                    // 침묵 감지 로직\r\n                    let lastAudioTime = Date.now();\r\n                    const silenceCheck = setInterval(() => {\r\n                        if (audioChunks.length > 0 && Date.now() - lastAudioTime > silenceThreshold) {\r\n                            clearInterval(silenceCheck);\r\n                            if (mediaRecorder.state === 'recording') {\r\n                                mediaRecorder.stop();\r\n                            }\r\n                        }\r\n                        if (audioChunks.length > 0) {\r\n                            lastAudioTime = Date.now();\r\n                        }\r\n                    }, 1000);\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('음성 입력 오류:', error);\r\n            setIsListening(false);\r\n            setIsProcessing(false);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // handleConfirm 함수 수정\r\n    const handleConfirm = useCallback((step) => {\r\n        if (!completedSteps.includes(step)) {\r\n            setCompletedSteps(prev => [...prev, step]);\r\n            setCurrentStep(step + 1);\r\n            \r\n            // 다음 섹션으로 스크롤\r\n            setTimeout(() => {\r\n                if (sectionsRef.current[step + 1]) {\r\n                    sectionsRef.current[step + 1].scrollIntoView({\r\n                        behavior: 'smooth',\r\n                        block: 'start'\r\n                    });\r\n                }\r\n            }, 100);\r\n\r\n            if (step + 1 <= 4) {\r\n                speak(step + 1);\r\n            }\r\n        }\r\n    }, [completedSteps, speak]);\r\n\r\n    // 질문 텍스트 가져오기\r\n    const getQuestionForStep = (step) => {\r\n        switch (step) {\r\n            case 1:\r\n                return \"이름이 어떻게 되세요?\";\r\n            case 2:\r\n                return \"나이가 어떻게 되세요?\";\r\n            case 3:\r\n                return \"전화번호가 어떻게 되세요?\";\r\n            case 4:\r\n                return \"어디 사세요?\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    };\r\n\r\n    // 입력값 변경 핸들러를 메모이제이션\r\n    const handleInputChange = useCallback((field, value) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [field]: value\r\n        }));\r\n    }, []);\r\n\r\n    // 컴포넌트 마운트 시 첫 번째 안내 음성 재생 (의존성 배열 수정)\r\n    useEffect(() => {\r\n        speak(1);  // 첫 번째 질문 재생\r\n        return () => {\r\n            localStorage.removeItem('resumeFormData');\r\n        };\r\n    }, []); // 빈 의존성 배열로 변경\r\n\r\n    const handleVoiceInput = async (field) => {\r\n        try {\r\n            setIsProcessing(true);\r\n            \r\n            // 1. 음성 녹음 시작\r\n            await startListeningHandler(field);\r\n            \r\n            setIsProcessing(false);\r\n        } catch (error) {\r\n            console.error('음성 입력 중 오류:', error);\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div \r\n            className=\"hmk-sequence-container\"\r\n            onSubmit={e => e.preventDefault()}\r\n        >\r\n            <div className=\"hmk-sequence-header\">\r\n                <button \r\n                    className=\"hmk-back-button\"\r\n                    onClick={() => navigate(-1)}\r\n                >\r\n                    <FontAwesomeIcon icon={faArrowLeft} />\r\n                </button>\r\n                <div className=\"hmk-progress-bar\">\r\n                    <div className=\"hmk-progress-track\">\r\n                        <div \r\n                            className=\"hmk-progress-fill\"\r\n                            style={{ width: `${(completedSteps.length / 4) * 100}%` }} // 수정: 단계 수에 맞게 변경\r\n                        ></div>\r\n                    </div>\r\n                    <span className=\"hmk-progress-step\">{completedSteps.length}/4</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"hmk-sections-container\">\r\n                <Section \r\n                    key={1}\r\n                    step={1}\r\n                    question=\"이름이 어떻게 되세요?\"\r\n                    field=\"name\"\r\n                    value={formData.name}\r\n                    onChange={handleInputChange}\r\n                    onConfirm={handleConfirm}\r\n                    isCompleted={completedSteps.includes(1)}\r\n                    currentStep={currentStep}\r\n                    sectionsRef={sectionsRef}\r\n                />\r\n                {completedSteps.includes(1) && (\r\n                    <Section \r\n                        key={2}\r\n                        step={2}\r\n                        question=\"나이가 어떻게 되세요?\"\r\n                        field=\"age\"\r\n                        value={formData.age}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(2)}\r\n                        currentStep={currentStep}\r\n                        sectionsRef={sectionsRef}\r\n                    />\r\n                )}\r\n                {completedSteps.includes(2) && (\r\n                    <Section \r\n                        key={3}\r\n                        step={3}\r\n                        question=\"전화번호가 어떻게 되세요?\"\r\n                        field=\"phone\"\r\n                        value={formData.phone}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(3)}\r\n                        currentStep={currentStep}\r\n                        sectionsRef={sectionsRef}\r\n                    />\r\n                )}\r\n                {completedSteps.includes(3) && (\r\n                    <Section \r\n                        key={4}\r\n                        step={4}\r\n                        question=\"어디 사세요?\"\r\n                        field=\"address\"\r\n                        value={formData.address}\r\n                        onChange={handleInputChange}\r\n                        onConfirm={handleConfirm}\r\n                        isCompleted={completedSteps.includes(4)}\r\n                        currentStep={currentStep}\r\n                        sectionsRef={sectionsRef}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            {/* 모든 단계가 완료되면 제출 버튼 표시 */}\r\n            {isAllCompleted && (\r\n                <div className=\"hmk-sequence-footer\">\r\n                    <button \r\n                        className=\"hmk-submit-button\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        제출하기\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResumeSequence;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}